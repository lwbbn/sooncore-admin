<?php
// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `acm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


if(!isset($acmmodule__t_StrList))
{
    $acmmodule__t_StrList = IcePHP_defineSequence('::acmmodule::StrList', $IcePHP__t_string);
}

if(!isset($acmmodule__t_IntList))
{
    $acmmodule__t_IntList = IcePHP_defineSequence('::acmmodule::IntList', $IcePHP__t_int);
}

if(!isset($acmmodule__t_BoolList))
{
    $acmmodule__t_BoolList = IcePHP_defineSequence('::acmmodule::BoolList', $IcePHP__t_bool);
}

if(!isset($acmmodule__t_StrMap))
{
    $acmmodule__t_StrMap = IcePHP_defineDictionary('::acmmodule::StrMap', $IcePHP__t_string, $IcePHP__t_string);
}

if(!isset($acmmodule__t_StrIntMap))
{
    $acmmodule__t_StrIntMap = IcePHP_defineDictionary('::acmmodule::StrIntMap', $IcePHP__t_string, $IcePHP__t_int);
}

if(!isset($acmmodule__t_StrBoolMap))
{
    $acmmodule__t_StrBoolMap = IcePHP_defineDictionary('::acmmodule::StrBoolMap', $IcePHP__t_string, $IcePHP__t_bool);
}

if(!isset($acmmodule__t_StrMapList))
{
    $acmmodule__t_StrMapList = IcePHP_defineSequence('::acmmodule::StrMapList', $acmmodule__t_StrMap);
}

if(!class_exists('acmmodule_DialoutPhoneNum'))
{
    class acmmodule_DialoutPhoneNum
    {
        public function __construct($countryCode='', $areaCode='', $number='', $extNumber='', $phone='')
        {
            $this->countryCode = $countryCode;
            $this->areaCode = $areaCode;
            $this->number = $number;
            $this->extNumber = $extNumber;
            $this->phone = $phone;
        }

        public function __toString()
        {
            global $acmmodule__t_DialoutPhoneNum;
            return IcePHP_stringify($this, $acmmodule__t_DialoutPhoneNum);
        }

        public $countryCode;
        public $areaCode;
        public $number;
        public $extNumber;
        public $phone;
    }

    $acmmodule__t_DialoutPhoneNum = IcePHP_defineStruct('::acmmodule::DialoutPhoneNum', 'acmmodule_DialoutPhoneNum', array(
        array('countryCode', $IcePHP__t_string), 
        array('areaCode', $IcePHP__t_string), 
        array('number', $IcePHP__t_string), 
        array('extNumber', $IcePHP__t_string), 
        array('phone', $IcePHP__t_string)));
}

if(!class_exists('acmmodule_DialoutPartyEntity'))
{
    class acmmodule_DialoutPartyEntity
    {
        public function __construct($name='', $phoneNum=null, $role=0, $userDefined='', $pin='', $userDefined2='', $userDefined3='')
        {
            $this->name = $name;
            $this->phoneNum = is_null($phoneNum) ? new acmmodule_DialoutPhoneNum : $phoneNum;
            $this->role = $role;
            $this->userDefined = $userDefined;
            $this->pin = $pin;
            $this->userDefined2 = $userDefined2;
            $this->userDefined3 = $userDefined3;
        }

        public function __toString()
        {
            global $acmmodule__t_DialoutPartyEntity;
            return IcePHP_stringify($this, $acmmodule__t_DialoutPartyEntity);
        }

        public $name;
        public $phoneNum;
        public $role;
        public $userDefined;
        public $pin;
        public $userDefined2;
        public $userDefined3;
    }

    $acmmodule__t_DialoutPartyEntity = IcePHP_defineStruct('::acmmodule::DialoutPartyEntity', 'acmmodule_DialoutPartyEntity', array(
        array('name', $IcePHP__t_string), 
        array('phoneNum', $acmmodule__t_DialoutPhoneNum), 
        array('role', $IcePHP__t_int), 
        array('userDefined', $IcePHP__t_string), 
        array('pin', $IcePHP__t_string), 
        array('userDefined2', $IcePHP__t_string), 
        array('userDefined3', $IcePHP__t_string)));
}

if(!isset($acmmodule__t_DialoutPartyEntityList))
{
    $acmmodule__t_DialoutPartyEntityList = IcePHP_defineSequence('::acmmodule::DialoutPartyEntityList', $acmmodule__t_DialoutPartyEntity);
}

if(!class_exists('acmmodule_PhoneNum'))
{
    class acmmodule_PhoneNum
    {
        public function __construct($phoneNumber='', $phoneNationalNumber='', $phoneCountryCode='', $phoneAreaCode='', $phoneAreaName='', $accessNumber='', $accessNumberCountryCode='', $accessNumberAreaCode='', $accessNumberAreaName='')
        {
            $this->phoneNumber = $phoneNumber;
            $this->phoneNationalNumber = $phoneNationalNumber;
            $this->phoneCountryCode = $phoneCountryCode;
            $this->phoneAreaCode = $phoneAreaCode;
            $this->phoneAreaName = $phoneAreaName;
            $this->accessNumber = $accessNumber;
            $this->accessNumberCountryCode = $accessNumberCountryCode;
            $this->accessNumberAreaCode = $accessNumberAreaCode;
            $this->accessNumberAreaName = $accessNumberAreaName;
        }

        public function __toString()
        {
            global $acmmodule__t_PhoneNum;
            return IcePHP_stringify($this, $acmmodule__t_PhoneNum);
        }

        public $phoneNumber;
        public $phoneNationalNumber;
        public $phoneCountryCode;
        public $phoneAreaCode;
        public $phoneAreaName;
        public $accessNumber;
        public $accessNumberCountryCode;
        public $accessNumberAreaCode;
        public $accessNumberAreaName;
    }

    $acmmodule__t_PhoneNum = IcePHP_defineStruct('::acmmodule::PhoneNum', 'acmmodule_PhoneNum', array(
        array('phoneNumber', $IcePHP__t_string), 
        array('phoneNationalNumber', $IcePHP__t_string), 
        array('phoneCountryCode', $IcePHP__t_string), 
        array('phoneAreaCode', $IcePHP__t_string), 
        array('phoneAreaName', $IcePHP__t_string), 
        array('accessNumber', $IcePHP__t_string), 
        array('accessNumberCountryCode', $IcePHP__t_string), 
        array('accessNumberAreaCode', $IcePHP__t_string), 
        array('accessNumberAreaName', $IcePHP__t_string)));
}

if(!class_exists('acmmodule_Event'))
{
    class acmmodule_Event extends Ice_ObjectImpl
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0)
        {
            $this->sid = $sid;
            $this->id = $id;
            $this->billingCode = $billingCode;
            $this->bridgeName = $bridgeName;
            $this->bridgeType = $bridgeType;
            $this->subConfNumber = $subConfNumber;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::Event';
        }

        public function __toString()
        {
            global $acmmodule__t_Event;
            return IcePHP_stringify($this, $acmmodule__t_Event);
        }

        public $sid;
        public $id;
        public $billingCode;
        public $bridgeName;
        public $bridgeType;
        public $subConfNumber;
    }

    class acmmodule_EventPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::Event', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::Event', $facet);
        }
    }

    $acmmodule__t_Event = IcePHP_defineClass('::acmmodule::Event', 'acmmodule_Event', false, $Ice__t_Object, null, array(
        array('sid', $IcePHP__t_long),
    
        array('id', $IcePHP__t_int),
    
        array('billingCode', $IcePHP__t_string),
    
        array('bridgeName', $IcePHP__t_string),
    
        array('bridgeType', $IcePHP__t_string),
    
        array('subConfNumber', $IcePHP__t_int)));

    $acmmodule__t_EventPrx = IcePHP_defineProxy($acmmodule__t_Event);
}

if(!isset($acmmodule__t_EventList))
{
    $acmmodule__t_EventList = IcePHP_defineSequence('::acmmodule::EventList', $acmmodule__t_Event);
}

if(!class_exists('acmmodule_EventConfStart'))
{
    class acmmodule_EventConfStart extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $startTime=0, $hostCode='', $guestCode='')
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->startTime = $startTime;
            $this->hostCode = $hostCode;
            $this->guestCode = $guestCode;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfStart';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfStart;
            return IcePHP_stringify($this, $acmmodule__t_EventConfStart);
        }

        public $startTime;
        public $hostCode;
        public $guestCode;
    }

    class acmmodule_EventConfStartPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfStart', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfStart', $facet);
        }
    }

    $acmmodule__t_EventConfStart = IcePHP_defineClass('::acmmodule::EventConfStart', 'acmmodule_EventConfStart', false, $acmmodule__t_Event, null, array(
        array('startTime', $IcePHP__t_long),
    
        array('hostCode', $IcePHP__t_string),
    
        array('guestCode', $IcePHP__t_string)));

    $acmmodule__t_EventConfStartPrx = IcePHP_defineProxy($acmmodule__t_EventConfStart);
}

if(!class_exists('acmmodule_EventConfEnd'))
{
    class acmmodule_EventConfEnd extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $endTime=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->endTime = $endTime;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfEnd';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfEnd;
            return IcePHP_stringify($this, $acmmodule__t_EventConfEnd);
        }

        public $endTime;
    }

    class acmmodule_EventConfEndPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfEnd', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfEnd', $facet);
        }
    }

    $acmmodule__t_EventConfEnd = IcePHP_defineClass('::acmmodule::EventConfEnd', 'acmmodule_EventConfEnd', false, $acmmodule__t_Event, null, array(
        array('endTime', $IcePHP__t_long)));

    $acmmodule__t_EventConfEndPrx = IcePHP_defineProxy($acmmodule__t_EventConfEnd);
}

if(!class_exists('acmmodule_EventConfLiving'))
{
    class acmmodule_EventConfLiving extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $livingTime=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->livingTime = $livingTime;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfLiving';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfLiving;
            return IcePHP_stringify($this, $acmmodule__t_EventConfLiving);
        }

        public $livingTime;
    }

    class acmmodule_EventConfLivingPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfLiving', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfLiving', $facet);
        }
    }

    $acmmodule__t_EventConfLiving = IcePHP_defineClass('::acmmodule::EventConfLiving', 'acmmodule_EventConfLiving', false, $acmmodule__t_Event, null, array(
        array('livingTime', $IcePHP__t_long)));

    $acmmodule__t_EventConfLivingPrx = IcePHP_defineProxy($acmmodule__t_EventConfLiving);
}

if(!class_exists('acmmodule_EventConfState'))
{
    class acmmodule_EventConfState extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $hostCode='', $guestCode='', $startTime=0, $maxParties=0, $dialoutAllowed=0, $pnr=false, $chairDisc=false, $entryExitTone=null, $lockState=0, $recordEnabled=false, $recordState=0, $quickStart=false, $muteState=0, $qaState=0, $votingState=0, $guestAudioMode=0, $guestMuteOverride=false)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->hostCode = $hostCode;
            $this->guestCode = $guestCode;
            $this->startTime = $startTime;
            $this->maxParties = $maxParties;
            $this->dialoutAllowed = $dialoutAllowed;
            $this->pnr = $pnr;
            $this->chairDisc = $chairDisc;
            $this->entryExitTone = $entryExitTone;
            $this->lockState = $lockState;
            $this->recordEnabled = $recordEnabled;
            $this->recordState = $recordState;
            $this->quickStart = $quickStart;
            $this->muteState = $muteState;
            $this->qaState = $qaState;
            $this->votingState = $votingState;
            $this->guestAudioMode = $guestAudioMode;
            $this->guestMuteOverride = $guestMuteOverride;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfState';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfState;
            return IcePHP_stringify($this, $acmmodule__t_EventConfState);
        }

        public $hostCode;
        public $guestCode;
        public $startTime;
        public $maxParties;
        public $dialoutAllowed;
        public $pnr;
        public $chairDisc;
        public $entryExitTone;
        public $lockState;
        public $recordEnabled;
        public $recordState;
        public $quickStart;
        public $muteState;
        public $qaState;
        public $votingState;
        public $guestAudioMode;
        public $guestMuteOverride;
    }

    class acmmodule_EventConfStatePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfState', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfState', $facet);
        }
    }

    $acmmodule__t_EventConfState = IcePHP_defineClass('::acmmodule::EventConfState', 'acmmodule_EventConfState', false, $acmmodule__t_Event, null, array(
        array('hostCode', $IcePHP__t_string),
    
        array('guestCode', $IcePHP__t_string),
    
        array('startTime', $IcePHP__t_long),
    
        array('maxParties', $IcePHP__t_int),
    
        array('dialoutAllowed', $IcePHP__t_int),
    
        array('pnr', $IcePHP__t_bool),
    
        array('chairDisc', $IcePHP__t_bool),
    
        array('entryExitTone', $acmmodule__t_IntList),
    
        array('lockState', $IcePHP__t_int),
    
        array('recordEnabled', $IcePHP__t_bool),
    
        array('recordState', $IcePHP__t_int),
    
        array('quickStart', $IcePHP__t_bool),
    
        array('muteState', $IcePHP__t_int),
    
        array('qaState', $IcePHP__t_int),
    
        array('votingState', $IcePHP__t_int),
    
        array('guestAudioMode', $IcePHP__t_int),
    
        array('guestMuteOverride', $IcePHP__t_bool)));

    $acmmodule__t_EventConfStatePrx = IcePHP_defineProxy($acmmodule__t_EventConfState);
}

if(!class_exists('acmmodule_EventPartyState'))
{
    class acmmodule_EventPartyState extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $partyID='', $name='', $partyPhoneNum=null, $role=0, $pin='', $userDefined='', $connectState=0, $disconnectReason=0, $muteReason=0, $isRequestOpHelp=false, $connectTime=0, $inConfTime=0, $operatorTime=0, $disconnectTime=0, $dataConfID='', $dialedIn=false, $userDefined2='', $userDefined3='')
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->partyID = $partyID;
            $this->name = $name;
            $this->partyPhoneNum = is_null($partyPhoneNum) ? new acmmodule_PhoneNum : $partyPhoneNum;
            $this->role = $role;
            $this->pin = $pin;
            $this->userDefined = $userDefined;
            $this->connectState = $connectState;
            $this->disconnectReason = $disconnectReason;
            $this->muteReason = $muteReason;
            $this->isRequestOpHelp = $isRequestOpHelp;
            $this->connectTime = $connectTime;
            $this->inConfTime = $inConfTime;
            $this->operatorTime = $operatorTime;
            $this->disconnectTime = $disconnectTime;
            $this->dataConfID = $dataConfID;
            $this->dialedIn = $dialedIn;
            $this->userDefined2 = $userDefined2;
            $this->userDefined3 = $userDefined3;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventPartyState';
        }

        public function __toString()
        {
            global $acmmodule__t_EventPartyState;
            return IcePHP_stringify($this, $acmmodule__t_EventPartyState);
        }

        public $partyID;
        public $name;
        public $partyPhoneNum;
        public $role;
        public $pin;
        public $userDefined;
        public $connectState;
        public $disconnectReason;
        public $muteReason;
        public $isRequestOpHelp;
        public $connectTime;
        public $inConfTime;
        public $operatorTime;
        public $disconnectTime;
        public $dataConfID;
        public $dialedIn;
        public $userDefined2;
        public $userDefined3;
    }

    class acmmodule_EventPartyStatePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventPartyState', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventPartyState', $facet);
        }
    }

    $acmmodule__t_EventPartyState = IcePHP_defineClass('::acmmodule::EventPartyState', 'acmmodule_EventPartyState', false, $acmmodule__t_Event, null, array(
        array('partyID', $IcePHP__t_string),
    
        array('name', $IcePHP__t_string),
    
        array('partyPhoneNum', $acmmodule__t_PhoneNum),
    
        array('role', $IcePHP__t_int),
    
        array('pin', $IcePHP__t_string),
    
        array('userDefined', $IcePHP__t_string),
    
        array('connectState', $IcePHP__t_int),
    
        array('disconnectReason', $IcePHP__t_int),
    
        array('muteReason', $IcePHP__t_int),
    
        array('isRequestOpHelp', $IcePHP__t_bool),
    
        array('connectTime', $IcePHP__t_long),
    
        array('inConfTime', $IcePHP__t_long),
    
        array('operatorTime', $IcePHP__t_long),
    
        array('disconnectTime', $IcePHP__t_long),
    
        array('dataConfID', $IcePHP__t_string),
    
        array('dialedIn', $IcePHP__t_bool),
    
        array('userDefined2', $IcePHP__t_string),
    
        array('userDefined3', $IcePHP__t_string)));

    $acmmodule__t_EventPartyStatePrx = IcePHP_defineProxy($acmmodule__t_EventPartyState);
}

if(!class_exists('acmmodule_EventPartyDel'))
{
    class acmmodule_EventPartyDel extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $partyID='')
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->partyID = $partyID;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventPartyDel';
        }

        public function __toString()
        {
            global $acmmodule__t_EventPartyDel;
            return IcePHP_stringify($this, $acmmodule__t_EventPartyDel);
        }

        public $partyID;
    }

    class acmmodule_EventPartyDelPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventPartyDel', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventPartyDel', $facet);
        }
    }

    $acmmodule__t_EventPartyDel = IcePHP_defineClass('::acmmodule::EventPartyDel', 'acmmodule_EventPartyDel', false, $acmmodule__t_Event, null, array(
        array('partyID', $IcePHP__t_string)));

    $acmmodule__t_EventPartyDelPrx = IcePHP_defineProxy($acmmodule__t_EventPartyDel);
}

if(!class_exists('acmmodule_EventConfTalkerState'))
{
    class acmmodule_EventConfTalkerState extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $state=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->state = $state;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfTalkerState';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfTalkerState;
            return IcePHP_stringify($this, $acmmodule__t_EventConfTalkerState);
        }

        public $state;
    }

    class acmmodule_EventConfTalkerStatePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfTalkerState', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfTalkerState', $facet);
        }
    }

    $acmmodule__t_EventConfTalkerState = IcePHP_defineClass('::acmmodule::EventConfTalkerState', 'acmmodule_EventConfTalkerState', false, $acmmodule__t_Event, null, array(
        array('state', $IcePHP__t_int)));

    $acmmodule__t_EventConfTalkerStatePrx = IcePHP_defineProxy($acmmodule__t_EventConfTalkerState);
}

if(!class_exists('acmmodule_EventConfWaitingLineState'))
{
    class acmmodule_EventConfWaitingLineState extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $state=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->state = $state;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventConfWaitingLineState';
        }

        public function __toString()
        {
            global $acmmodule__t_EventConfWaitingLineState;
            return IcePHP_stringify($this, $acmmodule__t_EventConfWaitingLineState);
        }

        public $state;
    }

    class acmmodule_EventConfWaitingLineStatePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventConfWaitingLineState', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventConfWaitingLineState', $facet);
        }
    }

    $acmmodule__t_EventConfWaitingLineState = IcePHP_defineClass('::acmmodule::EventConfWaitingLineState', 'acmmodule_EventConfWaitingLineState', false, $acmmodule__t_Event, null, array(
        array('state', $IcePHP__t_int)));

    $acmmodule__t_EventConfWaitingLineStatePrx = IcePHP_defineProxy($acmmodule__t_EventConfWaitingLineState);
}

if(!class_exists('acmmodule_EventQAResult'))
{
    class acmmodule_EventQAResult extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $moderatorList=null, $floorPartyID='', $queueList=null)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->moderatorList = $moderatorList;
            $this->floorPartyID = $floorPartyID;
            $this->queueList = $queueList;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventQAResult';
        }

        public function __toString()
        {
            global $acmmodule__t_EventQAResult;
            return IcePHP_stringify($this, $acmmodule__t_EventQAResult);
        }

        public $moderatorList;
        public $floorPartyID;
        public $queueList;
    }

    class acmmodule_EventQAResultPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventQAResult', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventQAResult', $facet);
        }
    }

    $acmmodule__t_EventQAResult = IcePHP_defineClass('::acmmodule::EventQAResult', 'acmmodule_EventQAResult', false, $acmmodule__t_Event, null, array(
        array('moderatorList', $acmmodule__t_StrList),
    
        array('floorPartyID', $IcePHP__t_string),
    
        array('queueList', $acmmodule__t_StrList)));

    $acmmodule__t_EventQAResultPrx = IcePHP_defineProxy($acmmodule__t_EventQAResult);
}

if(!class_exists('acmmodule_EventVotingConfig'))
{
    class acmmodule_EventVotingConfig extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $question='', $choiceText1='', $choiceText2='', $choiceText3='', $choiceText4='', $choiceText5='', $choiceText6='', $choiceText7='', $choiceText8='', $choiceText9='')
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->question = $question;
            $this->choiceText1 = $choiceText1;
            $this->choiceText2 = $choiceText2;
            $this->choiceText3 = $choiceText3;
            $this->choiceText4 = $choiceText4;
            $this->choiceText5 = $choiceText5;
            $this->choiceText6 = $choiceText6;
            $this->choiceText7 = $choiceText7;
            $this->choiceText8 = $choiceText8;
            $this->choiceText9 = $choiceText9;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventVotingConfig';
        }

        public function __toString()
        {
            global $acmmodule__t_EventVotingConfig;
            return IcePHP_stringify($this, $acmmodule__t_EventVotingConfig);
        }

        public $question;
        public $choiceText1;
        public $choiceText2;
        public $choiceText3;
        public $choiceText4;
        public $choiceText5;
        public $choiceText6;
        public $choiceText7;
        public $choiceText8;
        public $choiceText9;
    }

    class acmmodule_EventVotingConfigPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventVotingConfig', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventVotingConfig', $facet);
        }
    }

    $acmmodule__t_EventVotingConfig = IcePHP_defineClass('::acmmodule::EventVotingConfig', 'acmmodule_EventVotingConfig', false, $acmmodule__t_Event, null, array(
        array('question', $IcePHP__t_string),
    
        array('choiceText1', $IcePHP__t_string),
    
        array('choiceText2', $IcePHP__t_string),
    
        array('choiceText3', $IcePHP__t_string),
    
        array('choiceText4', $IcePHP__t_string),
    
        array('choiceText5', $IcePHP__t_string),
    
        array('choiceText6', $IcePHP__t_string),
    
        array('choiceText7', $IcePHP__t_string),
    
        array('choiceText8', $IcePHP__t_string),
    
        array('choiceText9', $IcePHP__t_string)));

    $acmmodule__t_EventVotingConfigPrx = IcePHP_defineProxy($acmmodule__t_EventVotingConfig);
}

if(!class_exists('acmmodule_EventVotingResult'))
{
    class acmmodule_EventVotingResult extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $tallyCompleted=false, $noVotes=0, $votesFor1=0, $votesFor2=0, $votesFor3=0, $votesFor4=0, $votesFor5=0, $votesFor6=0, $votesFor7=0, $votesFor8=0, $votesFor9=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->tallyCompleted = $tallyCompleted;
            $this->noVotes = $noVotes;
            $this->votesFor1 = $votesFor1;
            $this->votesFor2 = $votesFor2;
            $this->votesFor3 = $votesFor3;
            $this->votesFor4 = $votesFor4;
            $this->votesFor5 = $votesFor5;
            $this->votesFor6 = $votesFor6;
            $this->votesFor7 = $votesFor7;
            $this->votesFor8 = $votesFor8;
            $this->votesFor9 = $votesFor9;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventVotingResult';
        }

        public function __toString()
        {
            global $acmmodule__t_EventVotingResult;
            return IcePHP_stringify($this, $acmmodule__t_EventVotingResult);
        }

        public $tallyCompleted;
        public $noVotes;
        public $votesFor1;
        public $votesFor2;
        public $votesFor3;
        public $votesFor4;
        public $votesFor5;
        public $votesFor6;
        public $votesFor7;
        public $votesFor8;
        public $votesFor9;
    }

    class acmmodule_EventVotingResultPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventVotingResult', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventVotingResult', $facet);
        }
    }

    $acmmodule__t_EventVotingResult = IcePHP_defineClass('::acmmodule::EventVotingResult', 'acmmodule_EventVotingResult', false, $acmmodule__t_Event, null, array(
        array('tallyCompleted', $IcePHP__t_bool),
    
        array('noVotes', $IcePHP__t_int),
    
        array('votesFor1', $IcePHP__t_int),
    
        array('votesFor2', $IcePHP__t_int),
    
        array('votesFor3', $IcePHP__t_int),
    
        array('votesFor4', $IcePHP__t_int),
    
        array('votesFor5', $IcePHP__t_int),
    
        array('votesFor6', $IcePHP__t_int),
    
        array('votesFor7', $IcePHP__t_int),
    
        array('votesFor8', $IcePHP__t_int),
    
        array('votesFor9', $IcePHP__t_int)));

    $acmmodule__t_EventVotingResultPrx = IcePHP_defineProxy($acmmodule__t_EventVotingResult);
}

if(!class_exists('acmmodule_EventPartyTalker'))
{
    class acmmodule_EventPartyTalker extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $stateMap=null)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->stateMap = $stateMap;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventPartyTalker';
        }

        public function __toString()
        {
            global $acmmodule__t_EventPartyTalker;
            return IcePHP_stringify($this, $acmmodule__t_EventPartyTalker);
        }

        public $stateMap;
    }

    class acmmodule_EventPartyTalkerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventPartyTalker', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventPartyTalker', $facet);
        }
    }

    $acmmodule__t_EventPartyTalker = IcePHP_defineClass('::acmmodule::EventPartyTalker', 'acmmodule_EventPartyTalker', false, $acmmodule__t_Event, null, array(
        array('stateMap', $acmmodule__t_StrBoolMap)));

    $acmmodule__t_EventPartyTalkerPrx = IcePHP_defineProxy($acmmodule__t_EventPartyTalker);
}

if(!class_exists('acmmodule_EventNoiseParty'))
{
    class acmmodule_EventNoiseParty extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $noisePartyList=null)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->noisePartyList = $noisePartyList;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventNoiseParty';
        }

        public function __toString()
        {
            global $acmmodule__t_EventNoiseParty;
            return IcePHP_stringify($this, $acmmodule__t_EventNoiseParty);
        }

        public $noisePartyList;
    }

    class acmmodule_EventNoisePartyPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventNoiseParty', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventNoiseParty', $facet);
        }
    }

    $acmmodule__t_EventNoiseParty = IcePHP_defineClass('::acmmodule::EventNoiseParty', 'acmmodule_EventNoiseParty', false, $acmmodule__t_Event, null, array(
        array('noisePartyList', $acmmodule__t_StrList)));

    $acmmodule__t_EventNoisePartyPrx = IcePHP_defineProxy($acmmodule__t_EventNoiseParty);
}

if(!class_exists('acmmodule_EventRecordStateAcm'))
{
    class acmmodule_EventRecordStateAcm extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0, $state=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
            $this->state = $state;
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventRecordStateAcm';
        }

        public function __toString()
        {
            global $acmmodule__t_EventRecordStateAcm;
            return IcePHP_stringify($this, $acmmodule__t_EventRecordStateAcm);
        }

        public $state;
    }

    class acmmodule_EventRecordStateAcmPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventRecordStateAcm', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventRecordStateAcm', $facet);
        }
    }

    $acmmodule__t_EventRecordStateAcm = IcePHP_defineClass('::acmmodule::EventRecordStateAcm', 'acmmodule_EventRecordStateAcm', false, $acmmodule__t_Event, null, array(
        array('state', $IcePHP__t_int)));

    $acmmodule__t_EventRecordStateAcmPrx = IcePHP_defineProxy($acmmodule__t_EventRecordStateAcm);
}

if(!class_exists('acmmodule_EventSendConfsFinished'))
{
    class acmmodule_EventSendConfsFinished extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventSendConfsFinished';
        }

        public function __toString()
        {
            global $acmmodule__t_EventSendConfsFinished;
            return IcePHP_stringify($this, $acmmodule__t_EventSendConfsFinished);
        }
    }

    class acmmodule_EventSendConfsFinishedPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventSendConfsFinished', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventSendConfsFinished', $facet);
        }
    }

    $acmmodule__t_EventSendConfsFinished = IcePHP_defineClass('::acmmodule::EventSendConfsFinished', 'acmmodule_EventSendConfsFinished', false, $acmmodule__t_Event, null, null);

    $acmmodule__t_EventSendConfsFinishedPrx = IcePHP_defineProxy($acmmodule__t_EventSendConfsFinished);
}

if(!class_exists('acmmodule_EventSendPartiesFinished'))
{
    class acmmodule_EventSendPartiesFinished extends acmmodule_Event
    {
        public function __construct($sid=0, $id=0, $billingCode='', $bridgeName='', $bridgeType='', $subConfNumber=0)
        {
            parent::__construct($sid, $id, $billingCode, $bridgeName, $bridgeType, $subConfNumber);
        }

        public static function ice_staticId()
        {
            return '::acmmodule::EventSendPartiesFinished';
        }

        public function __toString()
        {
            global $acmmodule__t_EventSendPartiesFinished;
            return IcePHP_stringify($this, $acmmodule__t_EventSendPartiesFinished);
        }
    }

    class acmmodule_EventSendPartiesFinishedPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::EventSendPartiesFinished', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::EventSendPartiesFinished', $facet);
        }
    }

    $acmmodule__t_EventSendPartiesFinished = IcePHP_defineClass('::acmmodule::EventSendPartiesFinished', 'acmmodule_EventSendPartiesFinished', false, $acmmodule__t_Event, null, null);

    $acmmodule__t_EventSendPartiesFinishedPrx = IcePHP_defineProxy($acmmodule__t_EventSendPartiesFinished);
}

if(!interface_exists('acmmodule_AcmServer'))
{
    interface acmmodule_AcmServer
    {
        public function register($clientInfo, $ssid);
        public function unregister($ssid);
        public function getEvent($ssid, $evt);
        public function getAllEvent($ssid, $evtList);
    }

    class acmmodule_AcmServerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::AcmServer', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::AcmServer', $facet);
        }
    }

    $acmmodule__t_AcmServer = IcePHP_defineClass('::acmmodule::AcmServer', 'acmmodule_AcmServer', true, $Ice__t_Object, null, null);

    $acmmodule__t_AcmServerPrx = IcePHP_defineProxy($acmmodule__t_AcmServer);

    IcePHP_defineOperation($acmmodule__t_AcmServer, 'register', 0, 0, array($acmmodule__t_StrMap), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_AcmServer, 'unregister', 0, 0, array($IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_AcmServer, 'getEvent', 0, 0, array($IcePHP__t_string), array($acmmodule__t_Event), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_AcmServer, 'getAllEvent', 0, 0, array($IcePHP__t_string), array($acmmodule__t_EventList), $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_ConfControl'))
{
    interface acmmodule_ConfControl
    {
        public function isConfActive($ssid, $billingCode, $bridgeName);
        public function confActivate($ssid, $billingCode, $bridgeName);
        public function subConfActivate($ssid, $billingCode, $bridgeName, $subConfNumberList);
        public function subscribeConference($ssid, $billingCode, $flag, $activeConfsList);
        public function confClose($ssid, $billingCode, $subConfNumber, $bridgeName);
        public function kickOutParty($ssid, $billingCode, $partyIDs);
        public function hangupParty($ssid, $billingCode, $partyIDs);
        public function setBlastOption($ssid, $billingCode, $bridgeName, $msgToPlay, $joinConfirmationRequired);
        public function dialoutParty($ssid, $billingCode, $subConfNumber, $bridgeName, $party, $partyID);
        public function dialoutParties($ssid, $billingCode, $subConfNumber, $bridgeName, $partyList);
        public function blastParties($ssid, $billingCode, $partyIDList);
        public function mutePartySelf($ssid, $billingCode, $partyID, $modeState, $playMessage);
        public function muteParty($ssid, $billingCode, $partyIDs, $modeState, $playMessage);
        public function confMute($ssid, $billingCode, $bridgeName, $muteState);
        public function confLock($ssid, $billingCode, $bridgeName, $lockState);
        public function confRecord($ssid, $billingCode, $bridgeName, $recordState);
        public function setConfEntryExitConfig($ssid, $billingCode, $bridgeName, $hostEntry, $hostExit, $guestEntry, $guestExit);
        public function setConfDuration($ssid, $billingCode, $bridgeName, $duration);
        public function confQa($ssid, $billingCode, $bridgeName, $state);
        public function confQaPromote($ssid, $billingCode, $partyID);
        public function confQaRemove($ssid, $billingCode, $partyID);
        public function confQaModeratorAdd($ssid, $billingCode, $partyIDs);
        public function confQaModeratorRemove($ssid, $billingCode, $partyIDs);
        public function confQaReorder($ssid, $billingCode, $partyID, $position);
        public function confVotingStart($ssid, $billingCode, $bridgeName, $question, $choiceText);
        public function confVotingStop($ssid, $billingCode, $bridgeName);
        public function confWaitingLine($ssid, $billingCode, $bridgeName, $state, $index);
        public function partyOperatorSignal($ssid, $billingCode, $partyID, $signal);
        public function changePartyName($ssid, $billingCode, $partyID, $newName);
        public function changePartyRole($ssid, $billingCode, $partyID, $role);
        public function changePartyPhone($ssid, $billingCode, $partyID, $newPhone);
        public function changePartyUserDefined($ssid, $billingCode, $partyID, $value);
        public function changePartyUserDefined2($ssid, $billingCode, $partyID, $value);
        public function changePartyUserDefined3($ssid, $billingCode, $partyID, $value);
        public function confTalker($ssid, $billingCode, $bridgeName, $state);
        public function transferParty($ssid, $billingCode, $partyIDList, $toSubConfNumber, $playMessage);
    }

    class acmmodule_ConfControlPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::ConfControl', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::ConfControl', $facet);
        }
    }

    $acmmodule__t_ConfControl = IcePHP_defineClass('::acmmodule::ConfControl', 'acmmodule_ConfControl', true, $Ice__t_Object, null, null);

    $acmmodule__t_ConfControlPrx = IcePHP_defineProxy($acmmodule__t_ConfControl);

    IcePHP_defineOperation($acmmodule__t_ConfControl, 'isConfActive', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confActivate', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'subConfActivate', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_IntList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'subscribeConference', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), array($acmmodule__t_StrList), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confClose', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'kickOutParty', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'hangupParty', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'setBlastOption', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'dialoutParty', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_string, $acmmodule__t_DialoutPartyEntity), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'dialoutParties', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_string, $acmmodule__t_DialoutPartyEntityList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'blastParties', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'mutePartySelf', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'muteParty', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confMute', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confLock', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confRecord', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'setConfEntryExitConfig', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'setConfDuration', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQa', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQaPromote', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQaRemove', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQaModeratorAdd', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQaModeratorRemove', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confQaReorder', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confVotingStart', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confVotingStop', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confWaitingLine', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'partyOperatorSignal', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyName', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyRole', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyPhone', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_DialoutPhoneNum), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyUserDefined', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyUserDefined2', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'changePartyUserDefined3', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'confTalker', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfControl, 'transferParty', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_CommonService'))
{
    interface acmmodule_CommonService
    {
        public function getStandardAccessNumberAni($ssid, $bridgeName, $dnis, $ani);
        public function getCellPhoneArea($ssid, $cellPhoneNumber);
    }

    class acmmodule_CommonServicePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::CommonService', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::CommonService', $facet);
        }
    }

    $acmmodule__t_CommonService = IcePHP_defineClass('::acmmodule::CommonService', 'acmmodule_CommonService', true, $Ice__t_Object, null, null);

    $acmmodule__t_CommonServicePrx = IcePHP_defineProxy($acmmodule__t_CommonService);

    IcePHP_defineOperation($acmmodule__t_CommonService, 'getStandardAccessNumberAni', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $acmmodule__t_StrList, null);
    IcePHP_defineOperation($acmmodule__t_CommonService, 'getCellPhoneArea', 0, 0, array($IcePHP__t_string, $IcePHP__t_string), null, $acmmodule__t_StrList, null);
}

if(!interface_exists('acmmodule_ConfReserve'))
{
    interface acmmodule_ConfReserve
    {
        public function reserveConf($ssid, $msgMap, $responseDetail);
        public function scheduleConf($ssid, $accountBillingCode, $bridgeName, $msgMap, $responseDetail);
        public function deleteConf($ssid, $billingCode, $bridgeName, $responseDetail);
        public function suspendConf($ssid, $billingCode, $bridgeName, $responseDetail);
        public function updateConf($ssid, $billingCode, $bridgeName, $msgMap, $responseDetail);
        public function getConfInfo($ssid, $billingCode, $confInfoMap);
        public function getConfInfoByPasscode($ssid, $passcode, $role, $confInfoMap);
    }

    class acmmodule_ConfReservePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::ConfReserve', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::ConfReserve', $facet);
        }
    }

    $acmmodule__t_ConfReserve = IcePHP_defineClass('::acmmodule::ConfReserve', 'acmmodule_ConfReserve', true, $Ice__t_Object, null, null);

    $acmmodule__t_ConfReservePrx = IcePHP_defineProxy($acmmodule__t_ConfReserve);

    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'reserveConf', 0, 0, array($IcePHP__t_string, $acmmodule__t_StrMap), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'scheduleConf', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrMap), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'deleteConf', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'suspendConf', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'updateConf', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrMap), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'getConfInfo', 0, 0, array($IcePHP__t_string, $IcePHP__t_string), array($acmmodule__t_StrMap), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfReserve, 'getConfInfoByPasscode', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int), array($acmmodule__t_StrMap), $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_ConfPin'))
{
    interface acmmodule_ConfPin
    {
        public function addPin($ssid, $billingCode, $pinInfoList, $responseDetail);
        public function deletePin($ssid, $billingCode, $pin);
        public function deletePins($ssid, $billingCode);
    }

    class acmmodule_ConfPinPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::ConfPin', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::ConfPin', $facet);
        }
    }

    $acmmodule__t_ConfPin = IcePHP_defineClass('::acmmodule::ConfPin', 'acmmodule_ConfPin', true, $Ice__t_Object, null, null);

    $acmmodule__t_ConfPinPrx = IcePHP_defineProxy($acmmodule__t_ConfPin);

    IcePHP_defineOperation($acmmodule__t_ConfPin, 'addPin', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrMapList), array($IcePHP__t_string), $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfPin, 'deletePin', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_ConfPin, 'deletePins', 0, 0, array($IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_DnisAccess'))
{
    interface acmmodule_DnisAccess
    {
        public function setCustomerDnisAccess($ssid, $customerCode, $payType, $forceUpdateAllConf);
        public function setConfDnisAccess($ssid, $billingCode, $payType);
        public function getConfDnisAccess($ssid, $billingCode, $payType);
    }

    class acmmodule_DnisAccessPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::DnisAccess', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::DnisAccess', $facet);
        }
    }

    $acmmodule__t_DnisAccess = IcePHP_defineClass('::acmmodule::DnisAccess', 'acmmodule_DnisAccess', true, $Ice__t_Object, null, null);

    $acmmodule__t_DnisAccessPrx = IcePHP_defineProxy($acmmodule__t_DnisAccess);

    IcePHP_defineOperation($acmmodule__t_DnisAccess, 'setCustomerDnisAccess', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_DnisAccess, 'setConfDnisAccess', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $acmmodule__t_StrList), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_DnisAccess, 'getConfDnisAccess', 0, 0, array($IcePHP__t_string, $IcePHP__t_string), array($acmmodule__t_StrList), $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_CustomerBridge'))
{
    interface acmmodule_CustomerBridge
    {
        public function setCustomerBridge($ssid, $customerCode, $bridgeName);
        public function deleteCustomerBridge($ssid, $customerCode);
    }

    class acmmodule_CustomerBridgePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::CustomerBridge', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::CustomerBridge', $facet);
        }
    }

    $acmmodule__t_CustomerBridge = IcePHP_defineClass('::acmmodule::CustomerBridge', 'acmmodule_CustomerBridge', true, $Ice__t_Object, null, null);

    $acmmodule__t_CustomerBridgePrx = IcePHP_defineProxy($acmmodule__t_CustomerBridge);

    IcePHP_defineOperation($acmmodule__t_CustomerBridge, 'setCustomerBridge', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_CustomerBridge, 'deleteCustomerBridge', 0, 0, array($IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, null);
}

if(!interface_exists('acmmodule_PartyLimit'))
{
    interface acmmodule_PartyLimit
    {
        public function setCustomerPartyLimit($ssid, $customerCode, $partyLimit, $maxMinutes, $isDestroyConf);
        public function removeCustomerPartyLimit($ssid, $customerCode, $updateAllConfs);
        public function setConfPartyLimit($ssid, $billingCode, $partyLimit, $maxMinutes, $isDestroyConf);
        public function removeConfPartyLimit($ssid, $billingCode, $useCustomerPartyLimit);
    }

    class acmmodule_PartyLimitPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::acmmodule::PartyLimit', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::acmmodule::PartyLimit', $facet);
        }
    }

    $acmmodule__t_PartyLimit = IcePHP_defineClass('::acmmodule::PartyLimit', 'acmmodule_PartyLimit', true, $Ice__t_Object, null, null);

    $acmmodule__t_PartyLimitPrx = IcePHP_defineProxy($acmmodule__t_PartyLimit);

    IcePHP_defineOperation($acmmodule__t_PartyLimit, 'setCustomerPartyLimit', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_PartyLimit, 'removeCustomerPartyLimit', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_PartyLimit, 'setConfPartyLimit', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_bool), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($acmmodule__t_PartyLimit, 'removeConfPartyLimit', 0, 0, array($IcePHP__t_string, $IcePHP__t_string, $IcePHP__t_bool), null, $IcePHP__t_int, null);
}
?>
