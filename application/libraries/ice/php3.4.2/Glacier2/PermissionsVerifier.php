<?php
// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

require_once 'Glacier2/SSLInfo.php';

if(!interface_exists('Glacier2_PermissionsVerifier'))
{
    interface Glacier2_PermissionsVerifier
    {
        public function checkPermissions($userId, $password, $reason);
    }

    class Glacier2_PermissionsVerifierPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Glacier2::PermissionsVerifier', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Glacier2::PermissionsVerifier', $facet);
        }
    }

    $Glacier2__t_PermissionsVerifier = IcePHP_defineClass('::Glacier2::PermissionsVerifier', 'Glacier2_PermissionsVerifier', true, $Ice__t_Object, null, null);

    $Glacier2__t_PermissionsVerifierPrx = IcePHP_defineProxy($Glacier2__t_PermissionsVerifier);

    IcePHP_defineOperation($Glacier2__t_PermissionsVerifier, 'checkPermissions', 2, 1, array($IcePHP__t_string, $IcePHP__t_string), array($IcePHP__t_string), $IcePHP__t_bool, null);
}

if(!interface_exists('Glacier2_SSLPermissionsVerifier'))
{
    interface Glacier2_SSLPermissionsVerifier
    {
        public function authorize($info, $reason);
    }

    class Glacier2_SSLPermissionsVerifierPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Glacier2::SSLPermissionsVerifier', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Glacier2::SSLPermissionsVerifier', $facet);
        }
    }

    $Glacier2__t_SSLPermissionsVerifier = IcePHP_defineClass('::Glacier2::SSLPermissionsVerifier', 'Glacier2_SSLPermissionsVerifier', true, $Ice__t_Object, null, null);

    $Glacier2__t_SSLPermissionsVerifierPrx = IcePHP_defineProxy($Glacier2__t_SSLPermissionsVerifier);

    IcePHP_defineOperation($Glacier2__t_SSLPermissionsVerifier, 'authorize', 2, 1, array($Glacier2__t_SSLInfo), array($IcePHP__t_string), $IcePHP__t_bool, null);
}
?>
