<?php
namespace uc;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class PresenceMessageType {
  const DefaultType = 1;
  static public $__names = array(
    1 => 'DefaultType',
  );
}

final class PresenceMessageID {
  const DefaultId = 1;
  static public $__names = array(
    1 => 'DefaultId',
  );
}

final class PresenceType {
  const Online = 1;
  const Busy = 2;
  const Away = 3;
  const Meeting = 4;
  const Offline = 5;
  static public $__names = array(
    1 => 'Online',
    2 => 'Busy',
    3 => 'Away',
    4 => 'Meeting',
    5 => 'Offline',
  );
}

final class DeviceType {
  const Iphone = 1;
  const Android = 2;
  const PC = 3;
  const Background = 4;
  const Ipad = 5;
  static public $__names = array(
    1 => 'Iphone',
    2 => 'Android',
    3 => 'PC',
    4 => 'Background',
    5 => 'Ipad',
  );
}

final class PingMessageType {
  const DefaultType = 1;
  static public $__names = array(
    1 => 'DefaultType',
  );
}

final class PingMessageID {
  const DefaultId = 1;
  static public $__names = array(
    1 => 'DefaultId',
  );
}

final class AckMessageID {
  const AckSent = 1;
  const AckReceived = 2;
  const AckRead = 3;
  static public $__names = array(
    1 => 'AckSent',
    2 => 'AckReceived',
    3 => 'AckRead',
  );
}

final class AckMessageType {
  const DefaultType = 1;
  static public $__names = array(
    1 => 'DefaultType',
  );
}

final class SleepMessageType {
  const DefaultType = 1;
  static public $__names = array(
    1 => 'DefaultType',
  );
}

final class SleepMessageId {
  const IQRequest = 1;
  const IQConfirm = 2;
  static public $__names = array(
    1 => 'IQRequest',
    2 => 'IQConfirm',
  );
}

final class SleepMode {
  const light = 1;
  const deep = 2;
  const wakeup = 3;
  static public $__names = array(
    1 => 'light',
    2 => 'deep',
    3 => 'wakeup',
  );
}

final class GroupType {
  const to_person = 0;
  const to_group = 16;
  static public $__names = array(
    0 => 'to_person',
    16 => 'to_group',
  );
}

final class ContentType {
  const thrift_type = 1;
  const mime_type = 2;
  static public $__names = array(
    1 => 'thrift_type',
    2 => 'mime_type',
  );
}

final class ChatMessageType {
  const NormalChat = 1;
  const DiscussionChat = 2;
  const GroupChat = 3;
  static public $__names = array(
    1 => 'NormalChat',
    2 => 'DiscussionChat',
    3 => 'GroupChat',
  );
}

final class ChatMessageId {
  const TextContent = 1;
  const MediaContent = 2;
  static public $__names = array(
    1 => 'TextContent',
    2 => 'MediaContent',
  );
}

final class GroupMessageId {
  const TextContent = 1;
  const MediaContent = 2;
  const DisMemberAdd = 3;
  const DisMemberDel = 4;
  const DisNameUpdate = 5;
  const DiscussionCreate = 6;
  static public $__names = array(
    1 => 'TextContent',
    2 => 'MediaContent',
    3 => 'DisMemberAdd',
    4 => 'DisMemberDel',
    5 => 'DisNameUpdate',
    6 => 'DiscussionCreate',
  );
}

final class ChatMediaType {
  const MediaTypeAudio = 1;
  const MediaTypeImage = 2;
  const MediaTypeVideo = 3;
  static public $__names = array(
    1 => 'MediaTypeAudio',
    2 => 'MediaTypeImage',
    3 => 'MediaTypeVideo',
  );
}

final class TextContentType {
  const PlainText = 1;
  const MimeText = 2;
  static public $__names = array(
    1 => 'PlainText',
    2 => 'MimeText',
  );
}

final class SystemProtoMessageType {
  const SystemWelcome = 1;
  const ClientUpdate = 2;
  const CompleteInfoType = 3;
  const PwdRuleUpdate = 4;
  const clientInstallGuide = 5;
  const PasswordModify = 6;
  static public $__names = array(
    1 => 'SystemWelcome',
    2 => 'ClientUpdate',
    3 => 'CompleteInfoType',
    4 => 'PwdRuleUpdate',
    5 => 'clientInstallGuide',
    6 => 'PasswordModify',
  );
}

final class SystemMessageId {
  const DefaultId = 1;
  static public $__names = array(
    1 => 'DefaultId',
  );
}

final class ClientUpdateProtoMessageId {
  const IphoneType = 1;
  const AndroidType = 2;
  const PCType = 3;
  static public $__names = array(
    1 => 'IphoneType',
    2 => 'AndroidType',
    3 => 'PCType',
  );
}

final class CompleteInfoMessageId {
  const DefaultId = 1;
  static public $__names = array(
    1 => 'DefaultId',
  );
}

final class InputType {
  const SingleLine = 1;
  const MultiLine = 2;
  const Number = 3;
  const Date = 4;
  static public $__names = array(
    1 => 'SingleLine',
    2 => 'MultiLine',
    3 => 'Number',
    4 => 'Date',
  );
}

final class PwdRuleUpdateMessageId {
  const OutOfDateType = 1;
  const ComplexType = 2;
  static public $__names = array(
    1 => 'OutOfDateType',
    2 => 'ComplexType',
  );
}

final class PwdComplexType {
  const type_1 = 1;
  const type_2 = 2;
  const type_3 = 3;
  static public $__names = array(
    1 => 'type_1',
    2 => 'type_2',
    3 => 'type_3',
  );
}

final class ClientGuideMessageId {
  const MobileClientGuide = 1;
  const PCClientGuide = 2;
  static public $__names = array(
    1 => 'MobileClientGuide',
    2 => 'PCClientGuide',
  );
}

final class FileTransmissionMessageType {
  const DefaultType = 1;
  static public $__names = array(
    1 => 'DefaultType',
  );
}

final class FileTransmissionMessageId {
  const TransInvite = 1;
  const TransReceive = 2;
  const TransReject = 3;
  const TransStop = 4;
  static public $__names = array(
    1 => 'TransInvite',
    2 => 'TransReceive',
    3 => 'TransReject',
    4 => 'TransStop',
  );
}

final class OrganizeProtoMessageType {
  const OrganizeType = 1;
  static public $__names = array(
    1 => 'OrganizeType',
  );
}

final class OrganizeProtoMessageId {
  const DeptUpdate = 1;
  const DeptTransfer = 2;
  const PositionUpdate = 3;
  const EmployeeEntry = 4;
  const EmployeeLeave = 5;
  const EmployeeRightsUpdate = 6;
  const EmployeeJoin = 7;
  const DeptParentChange = 8;
  const CompanyJoin = 9;
  const DeptDelete = 10;
  const EmployeeEntryConfirm = 11;
  const EmployeeLeaveConfirm = 12;
  const DeptTransferConfirm = 13;
  const EmployeeEntryReject = 14;
  const EmployeeLeaveReject = 15;
  const DeptTransferReject = 16;
  static public $__names = array(
    1 => 'DeptUpdate',
    2 => 'DeptTransfer',
    3 => 'PositionUpdate',
    4 => 'EmployeeEntry',
    5 => 'EmployeeLeave',
    6 => 'EmployeeRightsUpdate',
    7 => 'EmployeeJoin',
    8 => 'DeptParentChange',
    9 => 'CompanyJoin',
    10 => 'DeptDelete',
    11 => 'EmployeeEntryConfirm',
    12 => 'EmployeeLeaveConfirm',
    13 => 'DeptTransferConfirm',
    14 => 'EmployeeEntryReject',
    15 => 'EmployeeLeaveReject',
    16 => 'DeptTransferReject',
  );
}

final class ConfMessageType {
  const NormalInstantConfInviteMsg = 1;
  const ConfInviteMsg = 2;
  const ConfUpdateMsg = 3;
  const ConfCancelMsg = 4;
  const ConfForwardMsg = 5;
  const ConfAlertMsg = 6;
  const ConfShareMsg = 7;
  const DiscussionInstantConfInviteMsg = 8;
  static public $__names = array(
    1 => 'NormalInstantConfInviteMsg',
    2 => 'ConfInviteMsg',
    3 => 'ConfUpdateMsg',
    4 => 'ConfCancelMsg',
    5 => 'ConfForwardMsg',
    6 => 'ConfAlertMsg',
    7 => 'ConfShareMsg',
    8 => 'DiscussionInstantConfInviteMsg',
  );
}

final class InstantConfInviteMessageId {
  const IQInvite = 1;
  const IQReceive = 2;
  const IQReject = 3;
  static public $__names = array(
    1 => 'IQInvite',
    2 => 'IQReceive',
    3 => 'IQReject',
  );
}

final class ConfInviteMessageId {
  const IQInvite = 1;
  const IQReceive = 2;
  const IQReject = 3;
  static public $__names = array(
    1 => 'IQInvite',
    2 => 'IQReceive',
    3 => 'IQReject',
  );
}

final class ConfUpdateMessageId {
  const IQInvite = 1;
  const IQReceive = 2;
  const IQReject = 3;
  static public $__names = array(
    1 => 'IQInvite',
    2 => 'IQReceive',
    3 => 'IQReject',
  );
}

final class ConfCancelMessageId {
  const DefaultId = 1;
  const RecurrentConfCancel = 2;
  static public $__names = array(
    1 => 'DefaultId',
    2 => 'RecurrentConfCancel',
  );
}

final class ConfAlertMessageId {
  const FifteenMinutesAlert = 1;
  const ZeroMinutesAlert = 2;
  const ConfStartAlert = 3;
  const ConfEndAlert = 4;
  const PartJoinAlert = 5;
  const PartQuitAlert = 6;
  static public $__names = array(
    1 => 'FifteenMinutesAlert',
    2 => 'ZeroMinutesAlert',
    3 => 'ConfStartAlert',
    4 => 'ConfEndAlert',
    5 => 'PartJoinAlert',
    6 => 'PartQuitAlert',
  );
}

final class RoleType {
  const Host = 4;
  const Speaker = 5;
  const Part = 0;
  static public $__names = array(
    4 => 'Host',
    5 => 'Speaker',
    0 => 'Part',
  );
}

final class CalendarMessageType {
  const CalendarShareType = 7;
  static public $__names = array(
    7 => 'CalendarShareType',
  );
}

final class ConfShareMessageId {
  const ConfShareCreate = 1;
  const ConfShareCancel = 2;
  const ConfShareGrantorDisable = 3;
  const ConfShareGranteeDisable = 4;
  const ConfShareGranteeTransfer = 5;
  const ConfShareGrantorLeave = 6;
  const ConfShareGranteeLeave = 7;
  static public $__names = array(
    1 => 'ConfShareCreate',
    2 => 'ConfShareCancel',
    3 => 'ConfShareGrantorDisable',
    4 => 'ConfShareGranteeDisable',
    5 => 'ConfShareGranteeTransfer',
    6 => 'ConfShareGrantorLeave',
    7 => 'ConfShareGranteeLeave',
  );
}

final class AudioChatMessageType {
  const DefaultType = 1;
  const AudioCallRecord = 2;
  const AudioUnfamiliarCallRecord = 3;
  static public $__names = array(
    1 => 'DefaultType',
    2 => 'AudioCallRecord',
    3 => 'AudioUnfamiliarCallRecord',
  );
}

final class AudioChatMessageId {
  const AudioInvite = 1;
  const AudioReceive = 2;
  const AudioReject = 3;
  const AudioStop = 4;
  static public $__names = array(
    1 => 'AudioInvite',
    2 => 'AudioReceive',
    3 => 'AudioReject',
    4 => 'AudioStop',
  );
}

final class AudioCallMessageId {
  const AudioBlockCall = 1;
  const AudioRejectCall = 2;
  const AudioRecentCall = 3;
  static public $__names = array(
    1 => 'AudioBlockCall',
    2 => 'AudioRejectCall',
    3 => 'AudioRecentCall',
  );
}

final class AddressBookMessageType {
  const CardUpdateMsg = 1;
  const ContacterRelationUpdateMsg = 2;
  static public $__names = array(
    1 => 'CardUpdateMsg',
    2 => 'ContacterRelationUpdateMsg',
  );
}

final class CardUpdateMessageId {
  const DefaultId = 1;
  static public $__names = array(
    1 => 'DefaultId',
  );
}

final class ContacterRelationUpdateMessageId {
  const ContacterAdd = 1;
  const ContacterDel = 2;
  static public $__names = array(
    1 => 'ContacterAdd',
    2 => 'ContacterDel',
  );
}

final class AppId {
  const AppChat = 1;
  const AppHeartbeat = 2;
  const AppPresence = 3;
  const AppNotify = 4;
  const AppFiletransfer = 5;
  const AppCalendar = 6;
  const AppMeeting = 7;
  const AppOrganization = 8;
  const AppCommon_notify = 9;
  const AppAck = 10;
  const AppAudio = 11;
  const AppAddressBook = 12;
  const AppSleep = 13;
  static public $__names = array(
    1 => 'AppChat',
    2 => 'AppHeartbeat',
    3 => 'AppPresence',
    4 => 'AppNotify',
    5 => 'AppFiletransfer',
    6 => 'AppCalendar',
    7 => 'AppMeeting',
    8 => 'AppOrganization',
    9 => 'AppCommon_notify',
    10 => 'AppAck',
    11 => 'AppAudio',
    12 => 'AppAddressBook',
    13 => 'AppSleep',
  );
}

class MessagePresence {
  static $_TSPEC;

  public $pri = null;
  public $show = null;
  public $status = null;
  public $deviceType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pri',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'show',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'deviceType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pri'])) {
        $this->pri = $vals['pri'];
      }
      if (isset($vals['show'])) {
        $this->show = $vals['show'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['deviceType'])) {
        $this->deviceType = $vals['deviceType'];
      }
    }
  }

  public function getName() {
    return 'MessagePresence';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deviceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessagePresence');
    if ($this->pri !== null) {
      $xfer += $output->writeFieldBegin('pri', TType::I32, 1);
      $xfer += $output->writeI32($this->pri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show !== null) {
      $xfer += $output->writeFieldBegin('show', TType::STRING, 2);
      $xfer += $output->writeString($this->show);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceType !== null) {
      $xfer += $output->writeFieldBegin('deviceType', TType::I32, 4);
      $xfer += $output->writeI32($this->deviceType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessagePing {
  static $_TSPEC;

  public $interval = null;
  public $deviceType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'interval',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'deviceType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['interval'])) {
        $this->interval = $vals['interval'];
      }
      if (isset($vals['deviceType'])) {
        $this->deviceType = $vals['deviceType'];
      }
    }
  }

  public function getName() {
    return 'MessagePing';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deviceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessagePing');
    if ($this->interval !== null) {
      $xfer += $output->writeFieldBegin('interval', TType::I32, 1);
      $xfer += $output->writeI32($this->interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceType !== null) {
      $xfer += $output->writeFieldBegin('deviceType', TType::I32, 2);
      $xfer += $output->writeI32($this->deviceType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AckSent {
  static $_TSPEC;

  public $id = null;
  public $seq = null;
  public $topicId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'seq',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'topicId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
      if (isset($vals['topicId'])) {
        $this->topicId = $vals['topicId'];
      }
    }
  }

  public function getName() {
    return 'AckSent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->topicId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AckSent');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I64, 2);
      $xfer += $output->writeI64($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topicId !== null) {
      $xfer += $output->writeFieldBegin('topicId', TType::I32, 3);
      $xfer += $output->writeI32($this->topicId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AckReceived {
  static $_TSPEC;

  public $id = null;
  public $seq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'seq',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
    }
  }

  public function getName() {
    return 'AckReceived';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AckReceived');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I64, 2);
      $xfer += $output->writeI64($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AckRead {
  static $_TSPEC;

  public $id = null;
  public $seq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'seq',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
    }
  }

  public function getName() {
    return 'AckRead';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AckRead');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I64, 2);
      $xfer += $output->writeI64($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SleepSet {
  static $_TSPEC;

  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'SleepSet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SleepSet');
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 1);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WakeupResult {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'WakeupResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WakeupResult');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TextContent {
  static $_TSPEC;

  public $type = null;
  public $text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
    }
  }

  public function getName() {
    return 'TextContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TextContent');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::BYTE, 1);
      $xfer += $output->writeByte($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MediaContent {
  static $_TSPEC;

  public $media_filename = null;
  public $media_filesize = null;
  public $media_type = null;
  public $media_down_url = null;
  public $media_thumb = null;
  public $media_duration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'media_filename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'media_filesize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'media_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'media_down_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'media_thumb',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'media_duration',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['media_filename'])) {
        $this->media_filename = $vals['media_filename'];
      }
      if (isset($vals['media_filesize'])) {
        $this->media_filesize = $vals['media_filesize'];
      }
      if (isset($vals['media_type'])) {
        $this->media_type = $vals['media_type'];
      }
      if (isset($vals['media_down_url'])) {
        $this->media_down_url = $vals['media_down_url'];
      }
      if (isset($vals['media_thumb'])) {
        $this->media_thumb = $vals['media_thumb'];
      }
      if (isset($vals['media_duration'])) {
        $this->media_duration = $vals['media_duration'];
      }
    }
  }

  public function getName() {
    return 'MediaContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_filesize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_down_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_thumb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MediaContent');
    if ($this->media_filename !== null) {
      $xfer += $output->writeFieldBegin('media_filename', TType::STRING, 1);
      $xfer += $output->writeString($this->media_filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_filesize !== null) {
      $xfer += $output->writeFieldBegin('media_filesize', TType::I32, 2);
      $xfer += $output->writeI32($this->media_filesize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_type !== null) {
      $xfer += $output->writeFieldBegin('media_type', TType::I32, 3);
      $xfer += $output->writeI32($this->media_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_down_url !== null) {
      $xfer += $output->writeFieldBegin('media_down_url', TType::STRING, 4);
      $xfer += $output->writeString($this->media_down_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_thumb !== null) {
      $xfer += $output->writeFieldBegin('media_thumb', TType::STRING, 5);
      $xfer += $output->writeString($this->media_thumb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_duration !== null) {
      $xfer += $output->writeFieldBegin('media_duration', TType::I32, 6);
      $xfer += $output->writeI32($this->media_duration);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupMemberAddContent {
  static $_TSPEC;

  public $operatorid = null;
  public $groupid = null;
  public $memberIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operatorid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'memberIds',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operatorid'])) {
        $this->operatorid = $vals['operatorid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['memberIds'])) {
        $this->memberIds = $vals['memberIds'];
      }
    }
  }

  public function getName() {
    return 'GroupMemberAddContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operatorid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->memberIds = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->memberIds []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupMemberAddContent');
    if ($this->operatorid !== null) {
      $xfer += $output->writeFieldBegin('operatorid', TType::I32, 1);
      $xfer += $output->writeI32($this->operatorid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberIds !== null) {
      if (!is_array($this->memberIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberIds', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->memberIds));
        {
          foreach ($this->memberIds as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupMemberDelContent {
  static $_TSPEC;

  public $operatorid = null;
  public $groupid = null;
  public $memberId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operatorid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'memberId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operatorid'])) {
        $this->operatorid = $vals['operatorid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['memberId'])) {
        $this->memberId = $vals['memberId'];
      }
    }
  }

  public function getName() {
    return 'GroupMemberDelContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operatorid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupMemberDelContent');
    if ($this->operatorid !== null) {
      $xfer += $output->writeFieldBegin('operatorid', TType::I32, 1);
      $xfer += $output->writeI32($this->operatorid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberId !== null) {
      $xfer += $output->writeFieldBegin('memberId', TType::I32, 3);
      $xfer += $output->writeI32($this->memberId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupNameUpdateContent {
  static $_TSPEC;

  public $operatorid = null;
  public $groupid = null;
  public $group_name = null;
  public $name_pinyin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operatorid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'group_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name_pinyin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operatorid'])) {
        $this->operatorid = $vals['operatorid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['group_name'])) {
        $this->group_name = $vals['group_name'];
      }
      if (isset($vals['name_pinyin'])) {
        $this->name_pinyin = $vals['name_pinyin'];
      }
    }
  }

  public function getName() {
    return 'GroupNameUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operatorid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name_pinyin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupNameUpdateContent');
    if ($this->operatorid !== null) {
      $xfer += $output->writeFieldBegin('operatorid', TType::I32, 1);
      $xfer += $output->writeI32($this->operatorid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_name !== null) {
      $xfer += $output->writeFieldBegin('group_name', TType::STRING, 3);
      $xfer += $output->writeString($this->group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name_pinyin !== null) {
      $xfer += $output->writeFieldBegin('name_pinyin', TType::STRING, 4);
      $xfer += $output->writeString($this->name_pinyin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupCreateContent {
  static $_TSPEC;

  public $operatorid = null;
  public $groupid = null;
  public $memberIds = null;
  public $avatar = null;
  public $group_name = null;
  public $name_pinyin = null;
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operatorid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'memberIds',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'group_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'name_pinyin',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operatorid'])) {
        $this->operatorid = $vals['operatorid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['memberIds'])) {
        $this->memberIds = $vals['memberIds'];
      }
      if (isset($vals['avatar'])) {
        $this->avatar = $vals['avatar'];
      }
      if (isset($vals['group_name'])) {
        $this->group_name = $vals['group_name'];
      }
      if (isset($vals['name_pinyin'])) {
        $this->name_pinyin = $vals['name_pinyin'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'GroupCreateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operatorid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->memberIds = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->memberIds []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name_pinyin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupCreateContent');
    if ($this->operatorid !== null) {
      $xfer += $output->writeFieldBegin('operatorid', TType::I32, 1);
      $xfer += $output->writeI32($this->operatorid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberIds !== null) {
      if (!is_array($this->memberIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberIds', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->memberIds));
        {
          foreach ($this->memberIds as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar !== null) {
      $xfer += $output->writeFieldBegin('avatar', TType::STRING, 4);
      $xfer += $output->writeString($this->avatar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_name !== null) {
      $xfer += $output->writeFieldBegin('group_name', TType::STRING, 5);
      $xfer += $output->writeString($this->group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name_pinyin !== null) {
      $xfer += $output->writeFieldBegin('name_pinyin', TType::STRING, 6);
      $xfer += $output->writeString($this->name_pinyin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 7);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PasswordModifyContent {
  static $_TSPEC;

  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'PasswordModifyContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PasswordModifyContent');
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 1);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SystemWelcomeContent {
  static $_TSPEC;

  public $title = null;
  public $image_url = null;
  public $desc = null;
  public $target_link = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_url',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'target_link',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['image_url'])) {
        $this->image_url = $vals['image_url'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['target_link'])) {
        $this->target_link = $vals['target_link'];
      }
    }
  }

  public function getName() {
    return 'SystemWelcomeContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemWelcomeContent');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_url !== null) {
      $xfer += $output->writeFieldBegin('image_url', TType::STRING, 2);
      $xfer += $output->writeString($this->image_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 3);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_link !== null) {
      $xfer += $output->writeFieldBegin('target_link', TType::STRING, 4);
      $xfer += $output->writeString($this->target_link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ClientUpdateContent {
  static $_TSPEC;

  public $version_code = null;
  public $is_force_upgrade = null;
  public $max_sdk_version = null;
  public $min_sdk_version = null;
  public $version_name = null;
  public $desc = null;
  public $url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_force_upgrade',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'max_sdk_version',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'min_sdk_version',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'version_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version_code'])) {
        $this->version_code = $vals['version_code'];
      }
      if (isset($vals['is_force_upgrade'])) {
        $this->is_force_upgrade = $vals['is_force_upgrade'];
      }
      if (isset($vals['max_sdk_version'])) {
        $this->max_sdk_version = $vals['max_sdk_version'];
      }
      if (isset($vals['min_sdk_version'])) {
        $this->min_sdk_version = $vals['min_sdk_version'];
      }
      if (isset($vals['version_name'])) {
        $this->version_name = $vals['version_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
    }
  }

  public function getName() {
    return 'ClientUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->is_force_upgrade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->max_sdk_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->min_sdk_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ClientUpdateContent');
    if ($this->version_code !== null) {
      $xfer += $output->writeFieldBegin('version_code', TType::I32, 1);
      $xfer += $output->writeI32($this->version_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_force_upgrade !== null) {
      $xfer += $output->writeFieldBegin('is_force_upgrade', TType::BYTE, 2);
      $xfer += $output->writeByte($this->is_force_upgrade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_sdk_version !== null) {
      $xfer += $output->writeFieldBegin('max_sdk_version', TType::I16, 3);
      $xfer += $output->writeI16($this->max_sdk_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->min_sdk_version !== null) {
      $xfer += $output->writeFieldBegin('min_sdk_version', TType::I16, 4);
      $xfer += $output->writeI16($this->min_sdk_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version_name !== null) {
      $xfer += $output->writeFieldBegin('version_name', TType::STRING, 5);
      $xfer += $output->writeString($this->version_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 7);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InfoCell {
  static $_TSPEC;

  public $name = null;
  public $label = null;
  public $type = null;
  public $not_null = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'label',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'not_null',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['label'])) {
        $this->label = $vals['label'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['not_null'])) {
        $this->not_null = $vals['not_null'];
      }
    }
  }

  public function getName() {
    return 'InfoCell';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->label);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->not_null);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InfoCell');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->label !== null) {
      $xfer += $output->writeFieldBegin('label', TType::STRING, 2);
      $xfer += $output->writeString($this->label);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I16, 3);
      $xfer += $output->writeI16($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->not_null !== null) {
      $xfer += $output->writeFieldBegin('not_null', TType::I16, 4);
      $xfer += $output->writeI16($this->not_null);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompleteInfoContent {
  static $_TSPEC;

  public $info_cell_list = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'info_cell_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\uc\InfoCell',
            ),
          ),
        2 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['info_cell_list'])) {
        $this->info_cell_list = $vals['info_cell_list'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'CompleteInfoContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->info_cell_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \uc\InfoCell();
              $xfer += $elem19->read($input);
              $this->info_cell_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompleteInfoContent');
    if ($this->info_cell_list !== null) {
      if (!is_array($this->info_cell_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info_cell_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->info_cell_list));
        {
          foreach ($this->info_cell_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 2);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PwdComplexUpdateContent {
  static $_TSPEC;

  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'PwdComplexUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PwdComplexUpdateContent');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PwdExpireContent {
  static $_TSPEC;

  public $dueDays = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dueDays',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dueDays'])) {
        $this->dueDays = $vals['dueDays'];
      }
    }
  }

  public function getName() {
    return 'PwdExpireContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dueDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PwdExpireContent');
    if ($this->dueDays !== null) {
      $xfer += $output->writeFieldBegin('dueDays', TType::I32, 1);
      $xfer += $output->writeI32($this->dueDays);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PCClientGuide {
  static $_TSPEC;

  public $downUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'downUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['downUrl'])) {
        $this->downUrl = $vals['downUrl'];
      }
    }
  }

  public function getName() {
    return 'PCClientGuide';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PCClientGuide');
    if ($this->downUrl !== null) {
      $xfer += $output->writeFieldBegin('downUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->downUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MobileClientGuide {
  static $_TSPEC;

  public $androidMarketUrl = null;
  public $iphoneMarketUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'androidMarketUrl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'iphoneMarketUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['androidMarketUrl'])) {
        $this->androidMarketUrl = $vals['androidMarketUrl'];
      }
      if (isset($vals['iphoneMarketUrl'])) {
        $this->iphoneMarketUrl = $vals['iphoneMarketUrl'];
      }
    }
  }

  public function getName() {
    return 'MobileClientGuide';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->androidMarketUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iphoneMarketUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MobileClientGuide');
    if ($this->androidMarketUrl !== null) {
      $xfer += $output->writeFieldBegin('androidMarketUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->androidMarketUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iphoneMarketUrl !== null) {
      $xfer += $output->writeFieldBegin('iphoneMarketUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->iphoneMarketUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FileTransmissionInviteContent {
  static $_TSPEC;

  public $fileMD5 = null;
  public $fileName = null;
  public $fileSize = null;
  public $blockSize = null;
  public $bZip = null;
  public $taskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fileMD5',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fileSize',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'blockSize',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'bZip',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'taskId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fileMD5'])) {
        $this->fileMD5 = $vals['fileMD5'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
      if (isset($vals['fileSize'])) {
        $this->fileSize = $vals['fileSize'];
      }
      if (isset($vals['blockSize'])) {
        $this->blockSize = $vals['blockSize'];
      }
      if (isset($vals['bZip'])) {
        $this->bZip = $vals['bZip'];
      }
      if (isset($vals['taskId'])) {
        $this->taskId = $vals['taskId'];
      }
    }
  }

  public function getName() {
    return 'FileTransmissionInviteContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileMD5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fileSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->bZip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileTransmissionInviteContent');
    if ($this->fileMD5 !== null) {
      $xfer += $output->writeFieldBegin('fileMD5', TType::STRING, 1);
      $xfer += $output->writeString($this->fileMD5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 2);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileSize !== null) {
      $xfer += $output->writeFieldBegin('fileSize', TType::I64, 3);
      $xfer += $output->writeI64($this->fileSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockSize !== null) {
      $xfer += $output->writeFieldBegin('blockSize', TType::I64, 4);
      $xfer += $output->writeI64($this->blockSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bZip !== null) {
      $xfer += $output->writeFieldBegin('bZip', TType::BYTE, 5);
      $xfer += $output->writeByte($this->bZip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskId !== null) {
      $xfer += $output->writeFieldBegin('taskId', TType::I32, 6);
      $xfer += $output->writeI32($this->taskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FileTransmissionReceiveContent {
  static $_TSPEC;

  public $sendTaskId = null;
  public $receiveTaskId = null;
  public $ip = null;
  public $port = null;
  public $serverList = null;
  public $transType = null;
  public $pointNum = null;
  public $breakPointInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendTaskId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'receiveTaskId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'serverList',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'transType',
          'type' => TType::BYTE,
          ),
        7 => array(
          'var' => 'pointNum',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'breakPointInfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sendTaskId'])) {
        $this->sendTaskId = $vals['sendTaskId'];
      }
      if (isset($vals['receiveTaskId'])) {
        $this->receiveTaskId = $vals['receiveTaskId'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['serverList'])) {
        $this->serverList = $vals['serverList'];
      }
      if (isset($vals['transType'])) {
        $this->transType = $vals['transType'];
      }
      if (isset($vals['pointNum'])) {
        $this->pointNum = $vals['pointNum'];
      }
      if (isset($vals['breakPointInfo'])) {
        $this->breakPointInfo = $vals['breakPointInfo'];
      }
    }
  }

  public function getName() {
    return 'FileTransmissionReceiveContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sendTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->receiveTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serverList);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->transType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pointNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->breakPointInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileTransmissionReceiveContent');
    if ($this->sendTaskId !== null) {
      $xfer += $output->writeFieldBegin('sendTaskId', TType::I32, 1);
      $xfer += $output->writeI32($this->sendTaskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveTaskId !== null) {
      $xfer += $output->writeFieldBegin('receiveTaskId', TType::I32, 2);
      $xfer += $output->writeI32($this->receiveTaskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverList !== null) {
      $xfer += $output->writeFieldBegin('serverList', TType::STRING, 5);
      $xfer += $output->writeString($this->serverList);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transType !== null) {
      $xfer += $output->writeFieldBegin('transType', TType::BYTE, 6);
      $xfer += $output->writeByte($this->transType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pointNum !== null) {
      $xfer += $output->writeFieldBegin('pointNum', TType::I32, 7);
      $xfer += $output->writeI32($this->pointNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->breakPointInfo !== null) {
      $xfer += $output->writeFieldBegin('breakPointInfo', TType::STRING, 8);
      $xfer += $output->writeString($this->breakPointInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FileTransmissionRejectContent {
  static $_TSPEC;

  public $taskId = null;
  public $fileName = null;
  public $fileSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fileSize',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskId'])) {
        $this->taskId = $vals['taskId'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
      if (isset($vals['fileSize'])) {
        $this->fileSize = $vals['fileSize'];
      }
    }
  }

  public function getName() {
    return 'FileTransmissionRejectContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fileSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileTransmissionRejectContent');
    if ($this->taskId !== null) {
      $xfer += $output->writeFieldBegin('taskId', TType::I32, 1);
      $xfer += $output->writeI32($this->taskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 2);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileSize !== null) {
      $xfer += $output->writeFieldBegin('fileSize', TType::I64, 3);
      $xfer += $output->writeI64($this->fileSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FileTransmissionStopContent {
  static $_TSPEC;

  public $sendTaskId = null;
  public $receiveTaskId = null;
  public $fileName = null;
  public $fileSize = null;
  public $flag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendTaskId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'receiveTaskId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'fileSize',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'flag',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sendTaskId'])) {
        $this->sendTaskId = $vals['sendTaskId'];
      }
      if (isset($vals['receiveTaskId'])) {
        $this->receiveTaskId = $vals['receiveTaskId'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
      if (isset($vals['fileSize'])) {
        $this->fileSize = $vals['fileSize'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
    }
  }

  public function getName() {
    return 'FileTransmissionStopContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sendTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->receiveTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fileSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileTransmissionStopContent');
    if ($this->sendTaskId !== null) {
      $xfer += $output->writeFieldBegin('sendTaskId', TType::I32, 1);
      $xfer += $output->writeI32($this->sendTaskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveTaskId !== null) {
      $xfer += $output->writeFieldBegin('receiveTaskId', TType::I32, 2);
      $xfer += $output->writeI32($this->receiveTaskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 3);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileSize !== null) {
      $xfer += $output->writeFieldBegin('fileSize', TType::I64, 4);
      $xfer += $output->writeI64($this->fileSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::BYTE, 5);
      $xfer += $output->writeByte($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeptTransferConfirmContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_name = null;
  public $dept_id = null;
  public $dept_name = null;
  public $user_id = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DeptTransferConfirmContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeptTransferConfirmContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 2);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 3);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 5);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeLeaveConfirmContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_name = null;
  public $dept_id = null;
  public $dept_name = null;
  public $user_id = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'EmployeeLeaveConfirmContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeLeaveConfirmContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 2);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 3);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 5);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeEntryConfirmContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_name = null;
  public $dept_id = null;
  public $dept_name = null;
  public $user_id = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'EmployeeEntryConfirmContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeEntryConfirmContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 2);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 3);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 5);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompanyJoinContent {
  static $_TSPEC;

  public $operator_id = null;
  public $company_id = null;
  public $company_name = null;
  public $user_id = null;
  public $user_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'company_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'company_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['company_id'])) {
        $this->company_id = $vals['company_id'];
      }
      if (isset($vals['company_name'])) {
        $this->company_name = $vals['company_name'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'CompanyJoinContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->company_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->company_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompanyJoinContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->company_id !== null) {
      $xfer += $output->writeFieldBegin('company_id', TType::I32, 2);
      $xfer += $output->writeI32($this->company_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->company_name !== null) {
      $xfer += $output->writeFieldBegin('company_name', TType::STRING, 3);
      $xfer += $output->writeString($this->company_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 4);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 5);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeptDeleteContent {
  static $_TSPEC;

  public $operator_id = null;
  public $dept_id = null;
  public $dept_name = null;
  public $parent_dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parent_dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['parent_dept_name'])) {
        $this->parent_dept_name = $vals['parent_dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DeptDeleteContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parent_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeptDeleteContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 2);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 3);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent_dept_name !== null) {
      $xfer += $output->writeFieldBegin('parent_dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->parent_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeptParentChangeContent {
  static $_TSPEC;

  public $operator_id = null;
  public $dept_id = null;
  public $old_dept_name = null;
  public $new_dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'old_dept_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'new_dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['old_dept_name'])) {
        $this->old_dept_name = $vals['old_dept_name'];
      }
      if (isset($vals['new_dept_name'])) {
        $this->new_dept_name = $vals['new_dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DeptParentChangeContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->old_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->new_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeptParentChangeContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 2);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->old_dept_name !== null) {
      $xfer += $output->writeFieldBegin('old_dept_name', TType::STRING, 3);
      $xfer += $output->writeString($this->old_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->new_dept_name !== null) {
      $xfer += $output->writeFieldBegin('new_dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->new_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeptUpdateContent {
  static $_TSPEC;

  public $operator_id = null;
  public $dept_id = null;
  public $old_dept_name = null;
  public $new_dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'old_dept_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'new_dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['old_dept_name'])) {
        $this->old_dept_name = $vals['old_dept_name'];
      }
      if (isset($vals['new_dept_name'])) {
        $this->new_dept_name = $vals['new_dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DeptUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->old_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->new_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeptUpdateContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 2);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->old_dept_name !== null) {
      $xfer += $output->writeFieldBegin('old_dept_name', TType::STRING, 3);
      $xfer += $output->writeString($this->old_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->new_dept_name !== null) {
      $xfer += $output->writeFieldBegin('new_dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->new_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeptTransferContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_id = null;
  public $user_name = null;
  public $dept_id = null;
  public $old_dept_name = null;
  public $dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'old_dept_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['old_dept_name'])) {
        $this->old_dept_name = $vals['old_dept_name'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'DeptTransferContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->old_dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeptTransferContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 4);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->old_dept_name !== null) {
      $xfer += $output->writeFieldBegin('old_dept_name', TType::STRING, 5);
      $xfer += $output->writeString($this->old_dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 6);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PositionUpdateContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_id = null;
  public $user_name = null;
  public $new_position = null;
  public $old_position = null;
  public $dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'new_position',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'old_position',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['new_position'])) {
        $this->new_position = $vals['new_position'];
      }
      if (isset($vals['old_position'])) {
        $this->old_position = $vals['old_position'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'PositionUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->new_position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->old_position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PositionUpdateContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->new_position !== null) {
      $xfer += $output->writeFieldBegin('new_position', TType::STRING, 4);
      $xfer += $output->writeString($this->new_position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->old_position !== null) {
      $xfer += $output->writeFieldBegin('old_position', TType::STRING, 5);
      $xfer += $output->writeString($this->old_position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 6);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeEntryContent {
  static $_TSPEC;

  public $operator_id = null;
  public $dept_id = null;
  public $user_name = null;
  public $dept_name = null;
  public $position = null;
  public $user_id = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'position',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'EmployeeEntryContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeEntryContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 2);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::STRING, 5);
      $xfer += $output->writeString($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 7);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeLeaveContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_id = null;
  public $user_name = null;
  public $dept_name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'EmployeeLeaveContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeLeaveContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeRightsChangeContent {
  static $_TSPEC;

  public $operator_id = null;
  public $user_id = null;
  public $user_name = null;
  public $dept_name = null;
  public $dept_id = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dept_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dept_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['dept_name'])) {
        $this->dept_name = $vals['dept_name'];
      }
      if (isset($vals['dept_id'])) {
        $this->dept_id = $vals['dept_id'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'EmployeeRightsChangeContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dept_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dept_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeRightsChangeContent');
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 1);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_name !== null) {
      $xfer += $output->writeFieldBegin('dept_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dept_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dept_id !== null) {
      $xfer += $output->writeFieldBegin('dept_id', TType::I32, 5);
      $xfer += $output->writeI32($this->dept_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InstantIQInviteContent {
  static $_TSPEC;

  public $confId = null;
  public $hostId = null;
  public $confPwd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'hostId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'confPwd',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['hostId'])) {
        $this->hostId = $vals['hostId'];
      }
      if (isset($vals['confPwd'])) {
        $this->confPwd = $vals['confPwd'];
      }
    }
  }

  public function getName() {
    return 'InstantIQInviteContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hostId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confPwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InstantIQInviteContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostId !== null) {
      $xfer += $output->writeFieldBegin('hostId', TType::I32, 2);
      $xfer += $output->writeI32($this->hostId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confPwd !== null) {
      $xfer += $output->writeFieldBegin('confPwd', TType::STRING, 3);
      $xfer += $output->writeString($this->confPwd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InstantIQReceiveContent {
  static $_TSPEC;

  public $confId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
    }
  }

  public function getName() {
    return 'InstantIQReceiveContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InstantIQReceiveContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InstantIQRejectContent {
  static $_TSPEC;

  public $confId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
    }
  }

  public function getName() {
    return 'InstantIQRejectContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InstantIQRejectContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IQInviteContent {
  static $_TSPEC;

  public $confId = null;
  public $shareUserID = null;
  public $hostId = null;
  public $groupID = null;
  public $icalendar = null;
  public $isRecurrent = null;
  public $startTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shareUserID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'hostId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'groupID',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'icalendar',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'isRecurrent',
          'type' => TType::BYTE,
          ),
        7 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['shareUserID'])) {
        $this->shareUserID = $vals['shareUserID'];
      }
      if (isset($vals['hostId'])) {
        $this->hostId = $vals['hostId'];
      }
      if (isset($vals['groupID'])) {
        $this->groupID = $vals['groupID'];
      }
      if (isset($vals['icalendar'])) {
        $this->icalendar = $vals['icalendar'];
      }
      if (isset($vals['isRecurrent'])) {
        $this->isRecurrent = $vals['isRecurrent'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
    }
  }

  public function getName() {
    return 'IQInviteContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hostId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isRecurrent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IQInviteContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareUserID !== null) {
      $xfer += $output->writeFieldBegin('shareUserID', TType::I32, 2);
      $xfer += $output->writeI32($this->shareUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostId !== null) {
      $xfer += $output->writeFieldBegin('hostId', TType::I32, 3);
      $xfer += $output->writeI32($this->hostId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupID !== null) {
      $xfer += $output->writeFieldBegin('groupID', TType::I32, 4);
      $xfer += $output->writeI32($this->groupID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icalendar !== null) {
      $xfer += $output->writeFieldBegin('icalendar', TType::STRING, 5);
      $xfer += $output->writeString($this->icalendar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isRecurrent !== null) {
      $xfer += $output->writeFieldBegin('isRecurrent', TType::BYTE, 6);
      $xfer += $output->writeByte($this->isRecurrent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 7);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IQReceiveContent {
  static $_TSPEC;

  public $confId = null;
  public $shareUserID = null;
  public $forwardUserID = null;
  public $startTime = null;
  public $hostId = null;
  public $icalendar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shareUserID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forwardUserID',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'hostId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'icalendar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['shareUserID'])) {
        $this->shareUserID = $vals['shareUserID'];
      }
      if (isset($vals['forwardUserID'])) {
        $this->forwardUserID = $vals['forwardUserID'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['hostId'])) {
        $this->hostId = $vals['hostId'];
      }
      if (isset($vals['icalendar'])) {
        $this->icalendar = $vals['icalendar'];
      }
    }
  }

  public function getName() {
    return 'IQReceiveContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forwardUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hostId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IQReceiveContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareUserID !== null) {
      $xfer += $output->writeFieldBegin('shareUserID', TType::I32, 2);
      $xfer += $output->writeI32($this->shareUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forwardUserID !== null) {
      $xfer += $output->writeFieldBegin('forwardUserID', TType::I32, 3);
      $xfer += $output->writeI32($this->forwardUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 4);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostId !== null) {
      $xfer += $output->writeFieldBegin('hostId', TType::I32, 5);
      $xfer += $output->writeI32($this->hostId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icalendar !== null) {
      $xfer += $output->writeFieldBegin('icalendar', TType::STRING, 6);
      $xfer += $output->writeString($this->icalendar);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IQRejectContent {
  static $_TSPEC;

  public $confId = null;
  public $shareUserID = null;
  public $forwardUserID = null;
  public $startTime = null;
  public $hostId = null;
  public $icalendar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shareUserID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forwardUserID',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'hostId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'icalendar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['shareUserID'])) {
        $this->shareUserID = $vals['shareUserID'];
      }
      if (isset($vals['forwardUserID'])) {
        $this->forwardUserID = $vals['forwardUserID'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['hostId'])) {
        $this->hostId = $vals['hostId'];
      }
      if (isset($vals['icalendar'])) {
        $this->icalendar = $vals['icalendar'];
      }
    }
  }

  public function getName() {
    return 'IQRejectContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forwardUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hostId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IQRejectContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareUserID !== null) {
      $xfer += $output->writeFieldBegin('shareUserID', TType::I32, 2);
      $xfer += $output->writeI32($this->shareUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forwardUserID !== null) {
      $xfer += $output->writeFieldBegin('forwardUserID', TType::I32, 3);
      $xfer += $output->writeI32($this->forwardUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 4);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostId !== null) {
      $xfer += $output->writeFieldBegin('hostId', TType::I32, 5);
      $xfer += $output->writeI32($this->hostId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icalendar !== null) {
      $xfer += $output->writeFieldBegin('icalendar', TType::STRING, 6);
      $xfer += $output->writeString($this->icalendar);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfCancelContent {
  static $_TSPEC;

  public $confId = null;
  public $shareUserID = null;
  public $startTime = null;
  public $icalendar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shareUserID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'icalendar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['shareUserID'])) {
        $this->shareUserID = $vals['shareUserID'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['icalendar'])) {
        $this->icalendar = $vals['icalendar'];
      }
    }
  }

  public function getName() {
    return 'ConfCancelContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfCancelContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareUserID !== null) {
      $xfer += $output->writeFieldBegin('shareUserID', TType::I32, 2);
      $xfer += $output->writeI32($this->shareUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 3);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icalendar !== null) {
      $xfer += $output->writeFieldBegin('icalendar', TType::STRING, 4);
      $xfer += $output->writeString($this->icalendar);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfAlertContent {
  static $_TSPEC;

  public $confId = null;
  public $shareUserID = null;
  public $isInstant = null;
  public $startTime = null;
  public $role = null;
  public $icalendar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shareUserID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'isInstant',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'role',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'icalendar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['shareUserID'])) {
        $this->shareUserID = $vals['shareUserID'];
      }
      if (isset($vals['isInstant'])) {
        $this->isInstant = $vals['isInstant'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['icalendar'])) {
        $this->icalendar = $vals['icalendar'];
      }
    }
  }

  public function getName() {
    return 'ConfAlertContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shareUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isInstant);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icalendar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfAlertContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shareUserID !== null) {
      $xfer += $output->writeFieldBegin('shareUserID', TType::I32, 2);
      $xfer += $output->writeI32($this->shareUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isInstant !== null) {
      $xfer += $output->writeFieldBegin('isInstant', TType::BYTE, 3);
      $xfer += $output->writeByte($this->isInstant);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 4);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 5);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icalendar !== null) {
      $xfer += $output->writeFieldBegin('icalendar', TType::STRING, 6);
      $xfer += $output->writeString($this->icalendar);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfShareContent {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ConfShareContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfShareContent');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioInviteContent {
  static $_TSPEC;

  public $confId = null;
  public $hostId = null;
  public $confPwd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'hostId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'confPwd',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
      if (isset($vals['hostId'])) {
        $this->hostId = $vals['hostId'];
      }
      if (isset($vals['confPwd'])) {
        $this->confPwd = $vals['confPwd'];
      }
    }
  }

  public function getName() {
    return 'AudioInviteContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hostId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confPwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioInviteContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostId !== null) {
      $xfer += $output->writeFieldBegin('hostId', TType::I32, 2);
      $xfer += $output->writeI32($this->hostId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confPwd !== null) {
      $xfer += $output->writeFieldBegin('confPwd', TType::STRING, 3);
      $xfer += $output->writeString($this->confPwd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioReceiveContent {
  static $_TSPEC;

  public $confId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
    }
  }

  public function getName() {
    return 'AudioReceiveContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioReceiveContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioRejectContent {
  static $_TSPEC;

  public $confId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
    }
  }

  public function getName() {
    return 'AudioRejectContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioRejectContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioStopContent {
  static $_TSPEC;

  public $confId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'confId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['confId'])) {
        $this->confId = $vals['confId'];
      }
    }
  }

  public function getName() {
    return 'AudioStopContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioStopContent');
    if ($this->confId !== null) {
      $xfer += $output->writeFieldBegin('confId', TType::I32, 1);
      $xfer += $output->writeI32($this->confId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioBlockCallContent {
  static $_TSPEC;

  public $phoneNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNum',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNum'])) {
        $this->phoneNum = $vals['phoneNum'];
      }
    }
  }

  public function getName() {
    return 'AudioBlockCallContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioBlockCallContent');
    if ($this->phoneNum !== null) {
      $xfer += $output->writeFieldBegin('phoneNum', TType::STRING, 1);
      $xfer += $output->writeString($this->phoneNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioRejectCallContent {
  static $_TSPEC;

  public $phoneNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNum',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNum'])) {
        $this->phoneNum = $vals['phoneNum'];
      }
    }
  }

  public function getName() {
    return 'AudioRejectCallContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioRejectCallContent');
    if ($this->phoneNum !== null) {
      $xfer += $output->writeFieldBegin('phoneNum', TType::STRING, 1);
      $xfer += $output->writeString($this->phoneNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AudioRecentCallContent {
  static $_TSPEC;

  public $duration = null;
  public $phoneNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'duration',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phoneNum',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['phoneNum'])) {
        $this->phoneNum = $vals['phoneNum'];
      }
    }
  }

  public function getName() {
    return 'AudioRecentCallContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AudioRecentCallContent');
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I32, 1);
      $xfer += $output->writeI32($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNum !== null) {
      $xfer += $output->writeFieldBegin('phoneNum', TType::STRING, 2);
      $xfer += $output->writeString($this->phoneNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardUpdateContent {
  static $_TSPEC;

  public $userId = null;
  public $cardVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardVersion',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['cardVersion'])) {
        $this->cardVersion = $vals['cardVersion'];
      }
    }
  }

  public function getName() {
    return 'CardUpdateContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardUpdateContent');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardVersion !== null) {
      $xfer += $output->writeFieldBegin('cardVersion', TType::I32, 2);
      $xfer += $output->writeI32($this->cardVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContacterAddContent {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ContacterAddContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContacterAddContent');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContacterDelContent {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ContacterDelContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContacterDelContent');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JID {
  static $_TSPEC;

  public $userID = null;
  public $siteID = null;
  public $resID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'siteID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'resID',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['siteID'])) {
        $this->siteID = $vals['siteID'];
      }
      if (isset($vals['resID'])) {
        $this->resID = $vals['resID'];
      }
    }
  }

  public function getName() {
    return 'JID';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->siteID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JID');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I32, 1);
      $xfer += $output->writeI32($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->siteID !== null) {
      $xfer += $output->writeFieldBegin('siteID', TType::I32, 2);
      $xfer += $output->writeI32($this->siteID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resID !== null) {
      $xfer += $output->writeFieldBegin('resID', TType::I32, 3);
      $xfer += $output->writeI32($this->resID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UcMessageHead {
  static $_TSPEC;

  public $version = 256;
  public $appid = null;
  public $pri = 0;
  public $protocoltype = null;
  public $protocolid = null;
  public $id = null;
  public $seq = null;
  public $timestamp = null;
  public $from = null;
  public $to = null;
  public $conversation = null;
  public $length = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'pri',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'protocoltype',
          'type' => TType::BYTE,
          ),
        5 => array(
          'var' => 'protocolid',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'seq',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'from',
          'type' => TType::STRUCT,
          'class' => '\uc\JID',
          ),
        11 => array(
          'var' => 'to',
          'type' => TType::STRUCT,
          'class' => '\uc\JID',
          ),
        12 => array(
          'var' => 'conversation',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'length',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['pri'])) {
        $this->pri = $vals['pri'];
      }
      if (isset($vals['protocoltype'])) {
        $this->protocoltype = $vals['protocoltype'];
      }
      if (isset($vals['protocolid'])) {
        $this->protocolid = $vals['protocolid'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['conversation'])) {
        $this->conversation = $vals['conversation'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
    }
  }

  public function getName() {
    return 'UcMessageHead';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->pri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->protocoltype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->protocolid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->from = new \uc\JID();
            $xfer += $this->from->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->to = new \uc\JID();
            $xfer += $this->to->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->conversation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UcMessageHead');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I16, 1);
      $xfer += $output->writeI16($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I16, 2);
      $xfer += $output->writeI16($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pri !== null) {
      $xfer += $output->writeFieldBegin('pri', TType::BYTE, 3);
      $xfer += $output->writeByte($this->pri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->protocoltype !== null) {
      $xfer += $output->writeFieldBegin('protocoltype', TType::BYTE, 4);
      $xfer += $output->writeByte($this->protocoltype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->protocolid !== null) {
      $xfer += $output->writeFieldBegin('protocolid', TType::I16, 5);
      $xfer += $output->writeI16($this->protocolid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 6);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I64, 7);
      $xfer += $output->writeI64($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 8);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from !== null) {
      if (!is_object($this->from)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('from', TType::STRUCT, 10);
      $xfer += $this->from->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      if (!is_object($this->to)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('to', TType::STRUCT, 11);
      $xfer += $this->to->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conversation !== null) {
      $xfer += $output->writeFieldBegin('conversation', TType::I32, 12);
      $xfer += $output->writeI32($this->conversation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I32, 13);
      $xfer += $output->writeI32($this->length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UcMessageBody {
  static $_TSPEC;

  public $presence = null;
  public $ping = null;
  public $ackSent = null;
  public $ackReceived = null;
  public $ackRead = null;
  public $sleep = null;
  public $wakeupConfirm = null;
  public $text = null;
  public $media = null;
  public $groupAdd = null;
  public $groupDel = null;
  public $groupUpdate = null;
  public $groupCreate = null;
  public $welcome = null;
  public $clientUpdate = null;
  public $completeInfo = null;
  public $pwdComplexUpdate = null;
  public $pwdExpire = null;
  public $pcGuide = null;
  public $mobileGuide = null;
  public $pwdModify = null;
  public $deptUpdate = null;
  public $deptTransfer = null;
  public $positionUpdate = null;
  public $employeeEntry = null;
  public $employeeLeave = null;
  public $employeeRights = null;
  public $deprtParentChange = null;
  public $companyJoin = null;
  public $deptDelete = null;
  public $entryConfirm = null;
  public $leaveConfirm = null;
  public $deptConfirm = null;
  public $instantInvite = null;
  public $confInvite = null;
  public $confReceive = null;
  public $confReject = null;
  public $confCancel = null;
  public $confAlert = null;
  public $instantReceive = null;
  public $instantReject = null;
  public $cardUpdate = null;
  public $contacterAdd = null;
  public $contacterDel = null;
  public $transInvite = null;
  public $transReceive = null;
  public $transReject = null;
  public $transStop = null;
  public $audioInvite = null;
  public $audioReceive = null;
  public $audioReject = null;
  public $audioStop = null;
  public $callRecent = null;
  public $callBlock = null;
  public $callReject = null;
  public $confShare = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        15 => array(
          'var' => 'presence',
          'type' => TType::STRUCT,
          'class' => '\uc\MessagePresence',
          ),
        16 => array(
          'var' => 'ping',
          'type' => TType::STRUCT,
          'class' => '\uc\MessagePing',
          ),
        20 => array(
          'var' => 'ackSent',
          'type' => TType::STRUCT,
          'class' => '\uc\AckSent',
          ),
        21 => array(
          'var' => 'ackReceived',
          'type' => TType::STRUCT,
          'class' => '\uc\AckReceived',
          ),
        22 => array(
          'var' => 'ackRead',
          'type' => TType::STRUCT,
          'class' => '\uc\AckRead',
          ),
        23 => array(
          'var' => 'sleep',
          'type' => TType::STRUCT,
          'class' => '\uc\SleepSet',
          ),
        24 => array(
          'var' => 'wakeupConfirm',
          'type' => TType::STRUCT,
          'class' => '\uc\WakeupResult',
          ),
        50 => array(
          'var' => 'text',
          'type' => TType::STRUCT,
          'class' => '\uc\TextContent',
          ),
        51 => array(
          'var' => 'media',
          'type' => TType::STRUCT,
          'class' => '\uc\MediaContent',
          ),
        52 => array(
          'var' => 'groupAdd',
          'type' => TType::STRUCT,
          'class' => '\uc\GroupMemberAddContent',
          ),
        53 => array(
          'var' => 'groupDel',
          'type' => TType::STRUCT,
          'class' => '\uc\GroupMemberDelContent',
          ),
        54 => array(
          'var' => 'groupUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\GroupNameUpdateContent',
          ),
        55 => array(
          'var' => 'groupCreate',
          'type' => TType::STRUCT,
          'class' => '\uc\GroupCreateContent',
          ),
        100 => array(
          'var' => 'welcome',
          'type' => TType::STRUCT,
          'class' => '\uc\SystemWelcomeContent',
          ),
        101 => array(
          'var' => 'clientUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\ClientUpdateContent',
          ),
        102 => array(
          'var' => 'completeInfo',
          'type' => TType::STRUCT,
          'class' => '\uc\CompleteInfoContent',
          ),
        103 => array(
          'var' => 'pwdComplexUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\PwdComplexUpdateContent',
          ),
        104 => array(
          'var' => 'pwdExpire',
          'type' => TType::STRUCT,
          'class' => '\uc\PwdExpireContent',
          ),
        105 => array(
          'var' => 'pcGuide',
          'type' => TType::STRUCT,
          'class' => '\uc\PCClientGuide',
          ),
        106 => array(
          'var' => 'mobileGuide',
          'type' => TType::STRUCT,
          'class' => '\uc\MobileClientGuide',
          ),
        107 => array(
          'var' => 'pwdModify',
          'type' => TType::STRUCT,
          'class' => '\uc\PasswordModifyContent',
          ),
        150 => array(
          'var' => 'deptUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\DeptUpdateContent',
          ),
        151 => array(
          'var' => 'deptTransfer',
          'type' => TType::STRUCT,
          'class' => '\uc\DeptTransferContent',
          ),
        152 => array(
          'var' => 'positionUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\PositionUpdateContent',
          ),
        153 => array(
          'var' => 'employeeEntry',
          'type' => TType::STRUCT,
          'class' => '\uc\EmployeeEntryContent',
          ),
        154 => array(
          'var' => 'employeeLeave',
          'type' => TType::STRUCT,
          'class' => '\uc\EmployeeLeaveContent',
          ),
        155 => array(
          'var' => 'employeeRights',
          'type' => TType::STRUCT,
          'class' => '\uc\EmployeeRightsChangeContent',
          ),
        156 => array(
          'var' => 'deprtParentChange',
          'type' => TType::STRUCT,
          'class' => '\uc\DeptParentChangeContent',
          ),
        157 => array(
          'var' => 'companyJoin',
          'type' => TType::STRUCT,
          'class' => '\uc\CompanyJoinContent',
          ),
        158 => array(
          'var' => 'deptDelete',
          'type' => TType::STRUCT,
          'class' => '\uc\DeptDeleteContent',
          ),
        159 => array(
          'var' => 'entryConfirm',
          'type' => TType::STRUCT,
          'class' => '\uc\EmployeeEntryConfirmContent',
          ),
        160 => array(
          'var' => 'leaveConfirm',
          'type' => TType::STRUCT,
          'class' => '\uc\EmployeeLeaveConfirmContent',
          ),
        161 => array(
          'var' => 'deptConfirm',
          'type' => TType::STRUCT,
          'class' => '\uc\DeptTransferConfirmContent',
          ),
        200 => array(
          'var' => 'instantInvite',
          'type' => TType::STRUCT,
          'class' => '\uc\InstantIQInviteContent',
          ),
        201 => array(
          'var' => 'confInvite',
          'type' => TType::STRUCT,
          'class' => '\uc\IQInviteContent',
          ),
        202 => array(
          'var' => 'confReceive',
          'type' => TType::STRUCT,
          'class' => '\uc\IQReceiveContent',
          ),
        203 => array(
          'var' => 'confReject',
          'type' => TType::STRUCT,
          'class' => '\uc\IQRejectContent',
          ),
        204 => array(
          'var' => 'confCancel',
          'type' => TType::STRUCT,
          'class' => '\uc\ConfCancelContent',
          ),
        205 => array(
          'var' => 'confAlert',
          'type' => TType::STRUCT,
          'class' => '\uc\ConfAlertContent',
          ),
        207 => array(
          'var' => 'instantReceive',
          'type' => TType::STRUCT,
          'class' => '\uc\InstantIQReceiveContent',
          ),
        208 => array(
          'var' => 'instantReject',
          'type' => TType::STRUCT,
          'class' => '\uc\InstantIQRejectContent',
          ),
        250 => array(
          'var' => 'cardUpdate',
          'type' => TType::STRUCT,
          'class' => '\uc\CardUpdateContent',
          ),
        251 => array(
          'var' => 'contacterAdd',
          'type' => TType::STRUCT,
          'class' => '\uc\ContacterAddContent',
          ),
        252 => array(
          'var' => 'contacterDel',
          'type' => TType::STRUCT,
          'class' => '\uc\ContacterDelContent',
          ),
        300 => array(
          'var' => 'transInvite',
          'type' => TType::STRUCT,
          'class' => '\uc\FileTransmissionInviteContent',
          ),
        301 => array(
          'var' => 'transReceive',
          'type' => TType::STRUCT,
          'class' => '\uc\FileTransmissionReceiveContent',
          ),
        302 => array(
          'var' => 'transReject',
          'type' => TType::STRUCT,
          'class' => '\uc\FileTransmissionRejectContent',
          ),
        303 => array(
          'var' => 'transStop',
          'type' => TType::STRUCT,
          'class' => '\uc\FileTransmissionStopContent',
          ),
        350 => array(
          'var' => 'audioInvite',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioInviteContent',
          ),
        351 => array(
          'var' => 'audioReceive',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioReceiveContent',
          ),
        352 => array(
          'var' => 'audioReject',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioRejectContent',
          ),
        353 => array(
          'var' => 'audioStop',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioStopContent',
          ),
        354 => array(
          'var' => 'callRecent',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioRecentCallContent',
          ),
        355 => array(
          'var' => 'callBlock',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioBlockCallContent',
          ),
        356 => array(
          'var' => 'callReject',
          'type' => TType::STRUCT,
          'class' => '\uc\AudioRejectCallContent',
          ),
        400 => array(
          'var' => 'confShare',
          'type' => TType::STRUCT,
          'class' => '\uc\ConfShareContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['presence'])) {
        $this->presence = $vals['presence'];
      }
      if (isset($vals['ping'])) {
        $this->ping = $vals['ping'];
      }
      if (isset($vals['ackSent'])) {
        $this->ackSent = $vals['ackSent'];
      }
      if (isset($vals['ackReceived'])) {
        $this->ackReceived = $vals['ackReceived'];
      }
      if (isset($vals['ackRead'])) {
        $this->ackRead = $vals['ackRead'];
      }
      if (isset($vals['sleep'])) {
        $this->sleep = $vals['sleep'];
      }
      if (isset($vals['wakeupConfirm'])) {
        $this->wakeupConfirm = $vals['wakeupConfirm'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['media'])) {
        $this->media = $vals['media'];
      }
      if (isset($vals['groupAdd'])) {
        $this->groupAdd = $vals['groupAdd'];
      }
      if (isset($vals['groupDel'])) {
        $this->groupDel = $vals['groupDel'];
      }
      if (isset($vals['groupUpdate'])) {
        $this->groupUpdate = $vals['groupUpdate'];
      }
      if (isset($vals['groupCreate'])) {
        $this->groupCreate = $vals['groupCreate'];
      }
      if (isset($vals['welcome'])) {
        $this->welcome = $vals['welcome'];
      }
      if (isset($vals['clientUpdate'])) {
        $this->clientUpdate = $vals['clientUpdate'];
      }
      if (isset($vals['completeInfo'])) {
        $this->completeInfo = $vals['completeInfo'];
      }
      if (isset($vals['pwdComplexUpdate'])) {
        $this->pwdComplexUpdate = $vals['pwdComplexUpdate'];
      }
      if (isset($vals['pwdExpire'])) {
        $this->pwdExpire = $vals['pwdExpire'];
      }
      if (isset($vals['pcGuide'])) {
        $this->pcGuide = $vals['pcGuide'];
      }
      if (isset($vals['mobileGuide'])) {
        $this->mobileGuide = $vals['mobileGuide'];
      }
      if (isset($vals['pwdModify'])) {
        $this->pwdModify = $vals['pwdModify'];
      }
      if (isset($vals['deptUpdate'])) {
        $this->deptUpdate = $vals['deptUpdate'];
      }
      if (isset($vals['deptTransfer'])) {
        $this->deptTransfer = $vals['deptTransfer'];
      }
      if (isset($vals['positionUpdate'])) {
        $this->positionUpdate = $vals['positionUpdate'];
      }
      if (isset($vals['employeeEntry'])) {
        $this->employeeEntry = $vals['employeeEntry'];
      }
      if (isset($vals['employeeLeave'])) {
        $this->employeeLeave = $vals['employeeLeave'];
      }
      if (isset($vals['employeeRights'])) {
        $this->employeeRights = $vals['employeeRights'];
      }
      if (isset($vals['deprtParentChange'])) {
        $this->deprtParentChange = $vals['deprtParentChange'];
      }
      if (isset($vals['companyJoin'])) {
        $this->companyJoin = $vals['companyJoin'];
      }
      if (isset($vals['deptDelete'])) {
        $this->deptDelete = $vals['deptDelete'];
      }
      if (isset($vals['entryConfirm'])) {
        $this->entryConfirm = $vals['entryConfirm'];
      }
      if (isset($vals['leaveConfirm'])) {
        $this->leaveConfirm = $vals['leaveConfirm'];
      }
      if (isset($vals['deptConfirm'])) {
        $this->deptConfirm = $vals['deptConfirm'];
      }
      if (isset($vals['instantInvite'])) {
        $this->instantInvite = $vals['instantInvite'];
      }
      if (isset($vals['confInvite'])) {
        $this->confInvite = $vals['confInvite'];
      }
      if (isset($vals['confReceive'])) {
        $this->confReceive = $vals['confReceive'];
      }
      if (isset($vals['confReject'])) {
        $this->confReject = $vals['confReject'];
      }
      if (isset($vals['confCancel'])) {
        $this->confCancel = $vals['confCancel'];
      }
      if (isset($vals['confAlert'])) {
        $this->confAlert = $vals['confAlert'];
      }
      if (isset($vals['instantReceive'])) {
        $this->instantReceive = $vals['instantReceive'];
      }
      if (isset($vals['instantReject'])) {
        $this->instantReject = $vals['instantReject'];
      }
      if (isset($vals['cardUpdate'])) {
        $this->cardUpdate = $vals['cardUpdate'];
      }
      if (isset($vals['contacterAdd'])) {
        $this->contacterAdd = $vals['contacterAdd'];
      }
      if (isset($vals['contacterDel'])) {
        $this->contacterDel = $vals['contacterDel'];
      }
      if (isset($vals['transInvite'])) {
        $this->transInvite = $vals['transInvite'];
      }
      if (isset($vals['transReceive'])) {
        $this->transReceive = $vals['transReceive'];
      }
      if (isset($vals['transReject'])) {
        $this->transReject = $vals['transReject'];
      }
      if (isset($vals['transStop'])) {
        $this->transStop = $vals['transStop'];
      }
      if (isset($vals['audioInvite'])) {
        $this->audioInvite = $vals['audioInvite'];
      }
      if (isset($vals['audioReceive'])) {
        $this->audioReceive = $vals['audioReceive'];
      }
      if (isset($vals['audioReject'])) {
        $this->audioReject = $vals['audioReject'];
      }
      if (isset($vals['audioStop'])) {
        $this->audioStop = $vals['audioStop'];
      }
      if (isset($vals['callRecent'])) {
        $this->callRecent = $vals['callRecent'];
      }
      if (isset($vals['callBlock'])) {
        $this->callBlock = $vals['callBlock'];
      }
      if (isset($vals['callReject'])) {
        $this->callReject = $vals['callReject'];
      }
      if (isset($vals['confShare'])) {
        $this->confShare = $vals['confShare'];
      }
    }
  }

  public function getName() {
    return 'UcMessageBody';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->presence = new \uc\MessagePresence();
            $xfer += $this->presence->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->ping = new \uc\MessagePing();
            $xfer += $this->ping->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->ackSent = new \uc\AckSent();
            $xfer += $this->ackSent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->ackReceived = new \uc\AckReceived();
            $xfer += $this->ackReceived->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->ackRead = new \uc\AckRead();
            $xfer += $this->ackRead->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRUCT) {
            $this->sleep = new \uc\SleepSet();
            $xfer += $this->sleep->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRUCT) {
            $this->wakeupConfirm = new \uc\WakeupResult();
            $xfer += $this->wakeupConfirm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRUCT) {
            $this->text = new \uc\TextContent();
            $xfer += $this->text->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::STRUCT) {
            $this->media = new \uc\MediaContent();
            $xfer += $this->media->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::STRUCT) {
            $this->groupAdd = new \uc\GroupMemberAddContent();
            $xfer += $this->groupAdd->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRUCT) {
            $this->groupDel = new \uc\GroupMemberDelContent();
            $xfer += $this->groupDel->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 54:
          if ($ftype == TType::STRUCT) {
            $this->groupUpdate = new \uc\GroupNameUpdateContent();
            $xfer += $this->groupUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 55:
          if ($ftype == TType::STRUCT) {
            $this->groupCreate = new \uc\GroupCreateContent();
            $xfer += $this->groupCreate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 100:
          if ($ftype == TType::STRUCT) {
            $this->welcome = new \uc\SystemWelcomeContent();
            $xfer += $this->welcome->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 101:
          if ($ftype == TType::STRUCT) {
            $this->clientUpdate = new \uc\ClientUpdateContent();
            $xfer += $this->clientUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 102:
          if ($ftype == TType::STRUCT) {
            $this->completeInfo = new \uc\CompleteInfoContent();
            $xfer += $this->completeInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 103:
          if ($ftype == TType::STRUCT) {
            $this->pwdComplexUpdate = new \uc\PwdComplexUpdateContent();
            $xfer += $this->pwdComplexUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 104:
          if ($ftype == TType::STRUCT) {
            $this->pwdExpire = new \uc\PwdExpireContent();
            $xfer += $this->pwdExpire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 105:
          if ($ftype == TType::STRUCT) {
            $this->pcGuide = new \uc\PCClientGuide();
            $xfer += $this->pcGuide->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 106:
          if ($ftype == TType::STRUCT) {
            $this->mobileGuide = new \uc\MobileClientGuide();
            $xfer += $this->mobileGuide->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 107:
          if ($ftype == TType::STRUCT) {
            $this->pwdModify = new \uc\PasswordModifyContent();
            $xfer += $this->pwdModify->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 150:
          if ($ftype == TType::STRUCT) {
            $this->deptUpdate = new \uc\DeptUpdateContent();
            $xfer += $this->deptUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 151:
          if ($ftype == TType::STRUCT) {
            $this->deptTransfer = new \uc\DeptTransferContent();
            $xfer += $this->deptTransfer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 152:
          if ($ftype == TType::STRUCT) {
            $this->positionUpdate = new \uc\PositionUpdateContent();
            $xfer += $this->positionUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 153:
          if ($ftype == TType::STRUCT) {
            $this->employeeEntry = new \uc\EmployeeEntryContent();
            $xfer += $this->employeeEntry->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 154:
          if ($ftype == TType::STRUCT) {
            $this->employeeLeave = new \uc\EmployeeLeaveContent();
            $xfer += $this->employeeLeave->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 155:
          if ($ftype == TType::STRUCT) {
            $this->employeeRights = new \uc\EmployeeRightsChangeContent();
            $xfer += $this->employeeRights->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 156:
          if ($ftype == TType::STRUCT) {
            $this->deprtParentChange = new \uc\DeptParentChangeContent();
            $xfer += $this->deprtParentChange->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 157:
          if ($ftype == TType::STRUCT) {
            $this->companyJoin = new \uc\CompanyJoinContent();
            $xfer += $this->companyJoin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 158:
          if ($ftype == TType::STRUCT) {
            $this->deptDelete = new \uc\DeptDeleteContent();
            $xfer += $this->deptDelete->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 159:
          if ($ftype == TType::STRUCT) {
            $this->entryConfirm = new \uc\EmployeeEntryConfirmContent();
            $xfer += $this->entryConfirm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 160:
          if ($ftype == TType::STRUCT) {
            $this->leaveConfirm = new \uc\EmployeeLeaveConfirmContent();
            $xfer += $this->leaveConfirm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 161:
          if ($ftype == TType::STRUCT) {
            $this->deptConfirm = new \uc\DeptTransferConfirmContent();
            $xfer += $this->deptConfirm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::STRUCT) {
            $this->instantInvite = new \uc\InstantIQInviteContent();
            $xfer += $this->instantInvite->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 201:
          if ($ftype == TType::STRUCT) {
            $this->confInvite = new \uc\IQInviteContent();
            $xfer += $this->confInvite->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 202:
          if ($ftype == TType::STRUCT) {
            $this->confReceive = new \uc\IQReceiveContent();
            $xfer += $this->confReceive->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 203:
          if ($ftype == TType::STRUCT) {
            $this->confReject = new \uc\IQRejectContent();
            $xfer += $this->confReject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 204:
          if ($ftype == TType::STRUCT) {
            $this->confCancel = new \uc\ConfCancelContent();
            $xfer += $this->confCancel->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 205:
          if ($ftype == TType::STRUCT) {
            $this->confAlert = new \uc\ConfAlertContent();
            $xfer += $this->confAlert->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 207:
          if ($ftype == TType::STRUCT) {
            $this->instantReceive = new \uc\InstantIQReceiveContent();
            $xfer += $this->instantReceive->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 208:
          if ($ftype == TType::STRUCT) {
            $this->instantReject = new \uc\InstantIQRejectContent();
            $xfer += $this->instantReject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 250:
          if ($ftype == TType::STRUCT) {
            $this->cardUpdate = new \uc\CardUpdateContent();
            $xfer += $this->cardUpdate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 251:
          if ($ftype == TType::STRUCT) {
            $this->contacterAdd = new \uc\ContacterAddContent();
            $xfer += $this->contacterAdd->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 252:
          if ($ftype == TType::STRUCT) {
            $this->contacterDel = new \uc\ContacterDelContent();
            $xfer += $this->contacterDel->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 300:
          if ($ftype == TType::STRUCT) {
            $this->transInvite = new \uc\FileTransmissionInviteContent();
            $xfer += $this->transInvite->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 301:
          if ($ftype == TType::STRUCT) {
            $this->transReceive = new \uc\FileTransmissionReceiveContent();
            $xfer += $this->transReceive->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 302:
          if ($ftype == TType::STRUCT) {
            $this->transReject = new \uc\FileTransmissionRejectContent();
            $xfer += $this->transReject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 303:
          if ($ftype == TType::STRUCT) {
            $this->transStop = new \uc\FileTransmissionStopContent();
            $xfer += $this->transStop->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 350:
          if ($ftype == TType::STRUCT) {
            $this->audioInvite = new \uc\AudioInviteContent();
            $xfer += $this->audioInvite->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 351:
          if ($ftype == TType::STRUCT) {
            $this->audioReceive = new \uc\AudioReceiveContent();
            $xfer += $this->audioReceive->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 352:
          if ($ftype == TType::STRUCT) {
            $this->audioReject = new \uc\AudioRejectContent();
            $xfer += $this->audioReject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 353:
          if ($ftype == TType::STRUCT) {
            $this->audioStop = new \uc\AudioStopContent();
            $xfer += $this->audioStop->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 354:
          if ($ftype == TType::STRUCT) {
            $this->callRecent = new \uc\AudioRecentCallContent();
            $xfer += $this->callRecent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 355:
          if ($ftype == TType::STRUCT) {
            $this->callBlock = new \uc\AudioBlockCallContent();
            $xfer += $this->callBlock->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 356:
          if ($ftype == TType::STRUCT) {
            $this->callReject = new \uc\AudioRejectCallContent();
            $xfer += $this->callReject->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 400:
          if ($ftype == TType::STRUCT) {
            $this->confShare = new \uc\ConfShareContent();
            $xfer += $this->confShare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UcMessageBody');
    if ($this->presence !== null) {
      if (!is_object($this->presence)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('presence', TType::STRUCT, 15);
      $xfer += $this->presence->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ping !== null) {
      if (!is_object($this->ping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ping', TType::STRUCT, 16);
      $xfer += $this->ping->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ackSent !== null) {
      if (!is_object($this->ackSent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ackSent', TType::STRUCT, 20);
      $xfer += $this->ackSent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ackReceived !== null) {
      if (!is_object($this->ackReceived)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ackReceived', TType::STRUCT, 21);
      $xfer += $this->ackReceived->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ackRead !== null) {
      if (!is_object($this->ackRead)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ackRead', TType::STRUCT, 22);
      $xfer += $this->ackRead->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sleep !== null) {
      if (!is_object($this->sleep)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sleep', TType::STRUCT, 23);
      $xfer += $this->sleep->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wakeupConfirm !== null) {
      if (!is_object($this->wakeupConfirm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wakeupConfirm', TType::STRUCT, 24);
      $xfer += $this->wakeupConfirm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      if (!is_object($this->text)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('text', TType::STRUCT, 50);
      $xfer += $this->text->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media !== null) {
      if (!is_object($this->media)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('media', TType::STRUCT, 51);
      $xfer += $this->media->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupAdd !== null) {
      if (!is_object($this->groupAdd)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupAdd', TType::STRUCT, 52);
      $xfer += $this->groupAdd->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupDel !== null) {
      if (!is_object($this->groupDel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupDel', TType::STRUCT, 53);
      $xfer += $this->groupDel->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupUpdate !== null) {
      if (!is_object($this->groupUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupUpdate', TType::STRUCT, 54);
      $xfer += $this->groupUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupCreate !== null) {
      if (!is_object($this->groupCreate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupCreate', TType::STRUCT, 55);
      $xfer += $this->groupCreate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->welcome !== null) {
      if (!is_object($this->welcome)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('welcome', TType::STRUCT, 100);
      $xfer += $this->welcome->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientUpdate !== null) {
      if (!is_object($this->clientUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clientUpdate', TType::STRUCT, 101);
      $xfer += $this->clientUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completeInfo !== null) {
      if (!is_object($this->completeInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completeInfo', TType::STRUCT, 102);
      $xfer += $this->completeInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwdComplexUpdate !== null) {
      if (!is_object($this->pwdComplexUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pwdComplexUpdate', TType::STRUCT, 103);
      $xfer += $this->pwdComplexUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwdExpire !== null) {
      if (!is_object($this->pwdExpire)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pwdExpire', TType::STRUCT, 104);
      $xfer += $this->pwdExpire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pcGuide !== null) {
      if (!is_object($this->pcGuide)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pcGuide', TType::STRUCT, 105);
      $xfer += $this->pcGuide->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileGuide !== null) {
      if (!is_object($this->mobileGuide)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mobileGuide', TType::STRUCT, 106);
      $xfer += $this->mobileGuide->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwdModify !== null) {
      if (!is_object($this->pwdModify)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pwdModify', TType::STRUCT, 107);
      $xfer += $this->pwdModify->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deptUpdate !== null) {
      if (!is_object($this->deptUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deptUpdate', TType::STRUCT, 150);
      $xfer += $this->deptUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deptTransfer !== null) {
      if (!is_object($this->deptTransfer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deptTransfer', TType::STRUCT, 151);
      $xfer += $this->deptTransfer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->positionUpdate !== null) {
      if (!is_object($this->positionUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('positionUpdate', TType::STRUCT, 152);
      $xfer += $this->positionUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->employeeEntry !== null) {
      if (!is_object($this->employeeEntry)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('employeeEntry', TType::STRUCT, 153);
      $xfer += $this->employeeEntry->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->employeeLeave !== null) {
      if (!is_object($this->employeeLeave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('employeeLeave', TType::STRUCT, 154);
      $xfer += $this->employeeLeave->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->employeeRights !== null) {
      if (!is_object($this->employeeRights)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('employeeRights', TType::STRUCT, 155);
      $xfer += $this->employeeRights->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deprtParentChange !== null) {
      if (!is_object($this->deprtParentChange)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deprtParentChange', TType::STRUCT, 156);
      $xfer += $this->deprtParentChange->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->companyJoin !== null) {
      if (!is_object($this->companyJoin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('companyJoin', TType::STRUCT, 157);
      $xfer += $this->companyJoin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deptDelete !== null) {
      if (!is_object($this->deptDelete)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deptDelete', TType::STRUCT, 158);
      $xfer += $this->deptDelete->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entryConfirm !== null) {
      if (!is_object($this->entryConfirm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('entryConfirm', TType::STRUCT, 159);
      $xfer += $this->entryConfirm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaveConfirm !== null) {
      if (!is_object($this->leaveConfirm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaveConfirm', TType::STRUCT, 160);
      $xfer += $this->leaveConfirm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deptConfirm !== null) {
      if (!is_object($this->deptConfirm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deptConfirm', TType::STRUCT, 161);
      $xfer += $this->deptConfirm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instantInvite !== null) {
      if (!is_object($this->instantInvite)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instantInvite', TType::STRUCT, 200);
      $xfer += $this->instantInvite->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confInvite !== null) {
      if (!is_object($this->confInvite)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confInvite', TType::STRUCT, 201);
      $xfer += $this->confInvite->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confReceive !== null) {
      if (!is_object($this->confReceive)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confReceive', TType::STRUCT, 202);
      $xfer += $this->confReceive->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confReject !== null) {
      if (!is_object($this->confReject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confReject', TType::STRUCT, 203);
      $xfer += $this->confReject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confCancel !== null) {
      if (!is_object($this->confCancel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confCancel', TType::STRUCT, 204);
      $xfer += $this->confCancel->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confAlert !== null) {
      if (!is_object($this->confAlert)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confAlert', TType::STRUCT, 205);
      $xfer += $this->confAlert->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instantReceive !== null) {
      if (!is_object($this->instantReceive)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instantReceive', TType::STRUCT, 207);
      $xfer += $this->instantReceive->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instantReject !== null) {
      if (!is_object($this->instantReject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instantReject', TType::STRUCT, 208);
      $xfer += $this->instantReject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardUpdate !== null) {
      if (!is_object($this->cardUpdate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cardUpdate', TType::STRUCT, 250);
      $xfer += $this->cardUpdate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacterAdd !== null) {
      if (!is_object($this->contacterAdd)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacterAdd', TType::STRUCT, 251);
      $xfer += $this->contacterAdd->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacterDel !== null) {
      if (!is_object($this->contacterDel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacterDel', TType::STRUCT, 252);
      $xfer += $this->contacterDel->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transInvite !== null) {
      if (!is_object($this->transInvite)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transInvite', TType::STRUCT, 300);
      $xfer += $this->transInvite->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transReceive !== null) {
      if (!is_object($this->transReceive)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transReceive', TType::STRUCT, 301);
      $xfer += $this->transReceive->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transReject !== null) {
      if (!is_object($this->transReject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transReject', TType::STRUCT, 302);
      $xfer += $this->transReject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transStop !== null) {
      if (!is_object($this->transStop)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transStop', TType::STRUCT, 303);
      $xfer += $this->transStop->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->audioInvite !== null) {
      if (!is_object($this->audioInvite)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('audioInvite', TType::STRUCT, 350);
      $xfer += $this->audioInvite->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->audioReceive !== null) {
      if (!is_object($this->audioReceive)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('audioReceive', TType::STRUCT, 351);
      $xfer += $this->audioReceive->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->audioReject !== null) {
      if (!is_object($this->audioReject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('audioReject', TType::STRUCT, 352);
      $xfer += $this->audioReject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->audioStop !== null) {
      if (!is_object($this->audioStop)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('audioStop', TType::STRUCT, 353);
      $xfer += $this->audioStop->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callRecent !== null) {
      if (!is_object($this->callRecent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('callRecent', TType::STRUCT, 354);
      $xfer += $this->callRecent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callBlock !== null) {
      if (!is_object($this->callBlock)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('callBlock', TType::STRUCT, 355);
      $xfer += $this->callBlock->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callReject !== null) {
      if (!is_object($this->callReject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('callReject', TType::STRUCT, 356);
      $xfer += $this->callReject->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confShare !== null) {
      if (!is_object($this->confShare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confShare', TType::STRUCT, 400);
      $xfer += $this->confShare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


